### YamlMime:ManagedReference
items:
- uid: Jelly.Bit
  commentId: T:Jelly.Bit
  id: Bit
  parent: Jelly
  children:
  - Jelly.Bit.#ctor(System.Boolean)
  - Jelly.Bit.CompareTo(Jelly.Bit)
  - Jelly.Bit.Equals(Jelly.Bit)
  - Jelly.Bit.Equals(System.Boolean)
  - Jelly.Bit.Equals(System.Object)
  - Jelly.Bit.GetHashCode
  - Jelly.Bit.MaxValue
  - Jelly.Bit.MinValue
  - Jelly.Bit.ToString
  - Jelly.Bit.Value
  - Jelly.Bit.op_BitwiseAnd(Jelly.Bit,Jelly.Bit)
  - Jelly.Bit.op_BitwiseOr(Jelly.Bit,Jelly.Bit)
  - Jelly.Bit.op_Equality(Jelly.Bit,Jelly.Bit)
  - Jelly.Bit.op_ExclusiveOr(Jelly.Bit,Jelly.Bit)
  - Jelly.Bit.op_Explicit(Jelly.Bit)~System.Boolean
  - Jelly.Bit.op_Explicit(Jelly.Bit)~System.Byte
  - Jelly.Bit.op_Explicit(Jelly.Bit)~System.Int16
  - Jelly.Bit.op_Explicit(Jelly.Bit)~System.Int32
  - Jelly.Bit.op_Explicit(Jelly.Bit)~System.Int64
  - Jelly.Bit.op_Explicit(Jelly.Bit)~System.SByte
  - Jelly.Bit.op_Explicit(Jelly.Bit)~System.UInt16
  - Jelly.Bit.op_Explicit(Jelly.Bit)~System.UInt32
  - Jelly.Bit.op_Explicit(Jelly.Bit)~System.UInt64
  - Jelly.Bit.op_GreaterThan(Jelly.Bit,Jelly.Bit)
  - Jelly.Bit.op_GreaterThanOrEqual(Jelly.Bit,Jelly.Bit)
  - Jelly.Bit.op_Implicit(System.Boolean)~Jelly.Bit
  - Jelly.Bit.op_Implicit(System.Int32)~Jelly.Bit
  - Jelly.Bit.op_Inequality(Jelly.Bit,Jelly.Bit)
  - Jelly.Bit.op_LessThan(Jelly.Bit,Jelly.Bit)
  - Jelly.Bit.op_LessThanOrEqual(Jelly.Bit,Jelly.Bit)
  - Jelly.Bit.op_LogicalNot(Jelly.Bit)
  - Jelly.Bit.op_Modulus(Jelly.Bit,Jelly.Bit)
  - Jelly.Bit.op_OnesComplement(Jelly.Bit)
  langs:
  - csharp
  - vb
  name: Bit
  nameWithType: Bit
  fullName: Jelly.Bit
  type: Struct
  source:
    remote:
      path: Jelly/Bit.cs
      branch: dev
      repo: https://github.com/tmaster-terrarian/Jelly.git
    id: Bit
    path: ../Jelly/Bit.cs
    startLine: 5
  assemblies:
  - Jelly
  namespace: Jelly
  syntax:
    content: 'public readonly struct Bit : IComparable<Bit>, IEquatable<Bit>, IEquatable<bool>, IBitwiseOperators<Bit, Bit, Bit>, IComparisonOperators<Bit, Bit, bool>, IEqualityOperators<Bit, Bit, bool>, IMinMaxValue<Bit>, IModulusOperators<Bit, Bit, Bit>'
    content.vb: Public Structure Bit Implements IComparable(Of Bit), IEquatable(Of Bit), IEquatable(Of Boolean), IBitwiseOperators(Of Bit, Bit, Bit), IComparisonOperators(Of Bit, Bit, Boolean), IEqualityOperators(Of Bit, Bit, Boolean), IMinMaxValue(Of Bit), IModulusOperators(Of Bit, Bit, Bit)
  implements:
  - System.IComparable{Jelly.Bit}
  - System.IEquatable{Jelly.Bit}
  - System.IEquatable{System.Boolean}
  - System.Numerics.IBitwiseOperators{Jelly.Bit,Jelly.Bit,Jelly.Bit}
  - System.Numerics.IComparisonOperators{Jelly.Bit,Jelly.Bit,System.Boolean}
  - System.Numerics.IEqualityOperators{Jelly.Bit,Jelly.Bit,System.Boolean}
  - System.Numerics.IMinMaxValue{Jelly.Bit}
  - System.Numerics.IModulusOperators{Jelly.Bit,Jelly.Bit,Jelly.Bit}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
- uid: Jelly.Bit.#ctor(System.Boolean)
  commentId: M:Jelly.Bit.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: Jelly.Bit
  langs:
  - csharp
  - vb
  name: Bit(bool)
  nameWithType: Bit.Bit(bool)
  fullName: Jelly.Bit.Bit(bool)
  type: Constructor
  source:
    remote:
      path: Jelly/Bit.cs
      branch: dev
      repo: https://github.com/tmaster-terrarian/Jelly.git
    id: .ctor
    path: ../Jelly/Bit.cs
    startLine: 5
  assemblies:
  - Jelly
  namespace: Jelly
  syntax:
    content: public Bit(bool value)
    parameters:
    - id: value
      type: System.Boolean
    content.vb: Public Sub New(value As Boolean)
  overload: Jelly.Bit.#ctor*
  nameWithType.vb: Bit.New(Boolean)
  fullName.vb: Jelly.Bit.New(Boolean)
  name.vb: New(Boolean)
- uid: Jelly.Bit.Value
  commentId: P:Jelly.Bit.Value
  id: Value
  parent: Jelly.Bit
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: Bit.Value
  fullName: Jelly.Bit.Value
  type: Property
  source:
    remote:
      path: Jelly/Bit.cs
      branch: dev
      repo: https://github.com/tmaster-terrarian/Jelly.git
    id: Value
    path: ../Jelly/Bit.cs
    startLine: 7
  assemblies:
  - Jelly
  namespace: Jelly
  syntax:
    content: public bool Value { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property Value As Boolean
  overload: Jelly.Bit.Value*
- uid: Jelly.Bit.MaxValue
  commentId: P:Jelly.Bit.MaxValue
  id: MaxValue
  parent: Jelly.Bit
  langs:
  - csharp
  - vb
  name: MaxValue
  nameWithType: Bit.MaxValue
  fullName: Jelly.Bit.MaxValue
  type: Property
  source:
    remote:
      path: Jelly/Bit.cs
      branch: dev
      repo: https://github.com/tmaster-terrarian/Jelly.git
    id: MaxValue
    path: ../Jelly/Bit.cs
    startLine: 11
  assemblies:
  - Jelly
  namespace: Jelly
  summary: Gets the maximum value of the current type.
  example: []
  syntax:
    content: public static Bit MaxValue { get; }
    parameters: []
    return:
      type: Jelly.Bit
    content.vb: Public Shared ReadOnly Property MaxValue As Bit
  overload: Jelly.Bit.MaxValue*
  implements:
  - System.Numerics.IMinMaxValue{Jelly.Bit}.MaxValue
- uid: Jelly.Bit.MinValue
  commentId: P:Jelly.Bit.MinValue
  id: MinValue
  parent: Jelly.Bit
  langs:
  - csharp
  - vb
  name: MinValue
  nameWithType: Bit.MinValue
  fullName: Jelly.Bit.MinValue
  type: Property
  source:
    remote:
      path: Jelly/Bit.cs
      branch: dev
      repo: https://github.com/tmaster-terrarian/Jelly.git
    id: MinValue
    path: ../Jelly/Bit.cs
    startLine: 12
  assemblies:
  - Jelly
  namespace: Jelly
  summary: Gets the minimum value of the current type.
  example: []
  syntax:
    content: public static Bit MinValue { get; }
    parameters: []
    return:
      type: Jelly.Bit
    content.vb: Public Shared ReadOnly Property MinValue As Bit
  overload: Jelly.Bit.MinValue*
  implements:
  - System.Numerics.IMinMaxValue{Jelly.Bit}.MinValue
- uid: Jelly.Bit.ToString
  commentId: M:Jelly.Bit.ToString
  id: ToString
  parent: Jelly.Bit
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Bit.ToString()
  fullName: Jelly.Bit.ToString()
  type: Method
  source:
    remote:
      path: Jelly/Bit.cs
      branch: dev
      repo: https://github.com/tmaster-terrarian/Jelly.git
    id: ToString
    path: ../Jelly/Bit.cs
    startLine: 16
  assemblies:
  - Jelly
  namespace: Jelly
  summary: Returns the fully qualified type name of this instance.
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: The fully qualified type name.
    content.vb: Public Overrides Function ToString() As String
  overridden: System.ValueType.ToString
  overload: Jelly.Bit.ToString*
- uid: Jelly.Bit.GetHashCode
  commentId: M:Jelly.Bit.GetHashCode
  id: GetHashCode
  parent: Jelly.Bit
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Bit.GetHashCode()
  fullName: Jelly.Bit.GetHashCode()
  type: Method
  source:
    remote:
      path: Jelly/Bit.cs
      branch: dev
      repo: https://github.com/tmaster-terrarian/Jelly.git
    id: GetHashCode
    path: ../Jelly/Bit.cs
    startLine: 21
  assemblies:
  - Jelly
  namespace: Jelly
  summary: Returns the hash code for this instance.
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: A 32-bit signed integer that is the hash code for this instance.
    content.vb: Public Overrides Function GetHashCode() As Integer
  overridden: System.ValueType.GetHashCode
  overload: Jelly.Bit.GetHashCode*
- uid: Jelly.Bit.CompareTo(Jelly.Bit)
  commentId: M:Jelly.Bit.CompareTo(Jelly.Bit)
  id: CompareTo(Jelly.Bit)
  parent: Jelly.Bit
  langs:
  - csharp
  - vb
  name: CompareTo(Bit)
  nameWithType: Bit.CompareTo(Bit)
  fullName: Jelly.Bit.CompareTo(Jelly.Bit)
  type: Method
  source:
    remote:
      path: Jelly/Bit.cs
      branch: dev
      repo: https://github.com/tmaster-terrarian/Jelly.git
    id: CompareTo
    path: ../Jelly/Bit.cs
    startLine: 26
  assemblies:
  - Jelly
  namespace: Jelly
  summary: Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
  example: []
  syntax:
    content: public int CompareTo(Bit other)
    parameters:
    - id: other
      type: Jelly.Bit
      description: An object to compare with this instance.
    return:
      type: System.Int32
      description: >-
        A value that indicates the relative order of the objects being compared. The return value has these meanings:  

         <table><thead><tr><th class="term"> Value</th><th class="description"> Meaning</th></tr></thead><tbody><tr><td class="term"> Less than zero</td><td class="description"> This instance precedes <code class="paramref">other</code> in the sort order.</td></tr><tr><td class="term"> Zero</td><td class="description"> This instance occurs in the same position in the sort order as <code class="paramref">other</code>.</td></tr><tr><td class="term"> Greater than zero</td><td class="description"> This instance follows <code class="paramref">other</code> in the sort order.</td></tr></tbody></table>
    content.vb: Public Function CompareTo(other As Bit) As Integer
  overload: Jelly.Bit.CompareTo*
  implements:
  - System.IComparable{Jelly.Bit}.CompareTo(Jelly.Bit)
- uid: Jelly.Bit.Equals(Jelly.Bit)
  commentId: M:Jelly.Bit.Equals(Jelly.Bit)
  id: Equals(Jelly.Bit)
  parent: Jelly.Bit
  langs:
  - csharp
  - vb
  name: Equals(Bit)
  nameWithType: Bit.Equals(Bit)
  fullName: Jelly.Bit.Equals(Jelly.Bit)
  type: Method
  source:
    remote:
      path: Jelly/Bit.cs
      branch: dev
      repo: https://github.com/tmaster-terrarian/Jelly.git
    id: Equals
    path: ../Jelly/Bit.cs
    startLine: 31
  assemblies:
  - Jelly
  namespace: Jelly
  summary: Indicates whether the current object is equal to another object of the same type.
  example: []
  syntax:
    content: public bool Equals(Bit other)
    parameters:
    - id: other
      type: Jelly.Bit
      description: An object to compare with this object.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the current object is equal to the <code class="paramref">other</code> parameter; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Function Equals(other As Bit) As Boolean
  overload: Jelly.Bit.Equals*
  implements:
  - System.IEquatable{Jelly.Bit}.Equals(Jelly.Bit)
- uid: Jelly.Bit.Equals(System.Boolean)
  commentId: M:Jelly.Bit.Equals(System.Boolean)
  id: Equals(System.Boolean)
  parent: Jelly.Bit
  langs:
  - csharp
  - vb
  name: Equals(bool)
  nameWithType: Bit.Equals(bool)
  fullName: Jelly.Bit.Equals(bool)
  type: Method
  source:
    remote:
      path: Jelly/Bit.cs
      branch: dev
      repo: https://github.com/tmaster-terrarian/Jelly.git
    id: Equals
    path: ../Jelly/Bit.cs
    startLine: 36
  assemblies:
  - Jelly
  namespace: Jelly
  summary: Indicates whether the current object is equal to another object of the same type.
  example: []
  syntax:
    content: public bool Equals(bool other)
    parameters:
    - id: other
      type: System.Boolean
      description: An object to compare with this object.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the current object is equal to the <code class="paramref">other</code> parameter; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Function Equals(other As Boolean) As Boolean
  overload: Jelly.Bit.Equals*
  implements:
  - System.IEquatable{System.Boolean}.Equals(System.Boolean)
  nameWithType.vb: Bit.Equals(Boolean)
  fullName.vb: Jelly.Bit.Equals(Boolean)
  name.vb: Equals(Boolean)
- uid: Jelly.Bit.op_Equality(Jelly.Bit,Jelly.Bit)
  commentId: M:Jelly.Bit.op_Equality(Jelly.Bit,Jelly.Bit)
  id: op_Equality(Jelly.Bit,Jelly.Bit)
  parent: Jelly.Bit
  langs:
  - csharp
  - vb
  name: operator ==(Bit, Bit)
  nameWithType: Bit.operator ==(Bit, Bit)
  fullName: Jelly.Bit.operator ==(Jelly.Bit, Jelly.Bit)
  type: Operator
  source:
    remote:
      path: Jelly/Bit.cs
      branch: dev
      repo: https://github.com/tmaster-terrarian/Jelly.git
    id: op_Equality
    path: ../Jelly/Bit.cs
    startLine: 41
  assemblies:
  - Jelly
  namespace: Jelly
  summary: Compares two values to determine equality.
  example: []
  syntax:
    content: public static bool operator ==(Bit left, Bit right)
    parameters:
    - id: left
      type: Jelly.Bit
      description: The value to compare with <code class="paramref">right</code>.
    - id: right
      type: Jelly.Bit
      description: The value to compare with <code class="paramref">left</code>.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if <code class="paramref">left</code> is equal to <code class="paramref">right</code>; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Shared Operator =(left As Bit, right As Bit) As Boolean
  overload: Jelly.Bit.op_Equality*
  implements:
  - System.Numerics.IEqualityOperators{Jelly.Bit,Jelly.Bit,System.Boolean}.op_Equality(Jelly.Bit,Jelly.Bit)
  nameWithType.vb: Bit.=(Bit, Bit)
  fullName.vb: Jelly.Bit.=(Jelly.Bit, Jelly.Bit)
  name.vb: =(Bit, Bit)
- uid: Jelly.Bit.op_Inequality(Jelly.Bit,Jelly.Bit)
  commentId: M:Jelly.Bit.op_Inequality(Jelly.Bit,Jelly.Bit)
  id: op_Inequality(Jelly.Bit,Jelly.Bit)
  parent: Jelly.Bit
  langs:
  - csharp
  - vb
  name: operator !=(Bit, Bit)
  nameWithType: Bit.operator !=(Bit, Bit)
  fullName: Jelly.Bit.operator !=(Jelly.Bit, Jelly.Bit)
  type: Operator
  source:
    remote:
      path: Jelly/Bit.cs
      branch: dev
      repo: https://github.com/tmaster-terrarian/Jelly.git
    id: op_Inequality
    path: ../Jelly/Bit.cs
    startLine: 46
  assemblies:
  - Jelly
  namespace: Jelly
  summary: Compares two values to determine inequality.
  example: []
  syntax:
    content: public static bool operator !=(Bit left, Bit right)
    parameters:
    - id: left
      type: Jelly.Bit
      description: The value to compare with <code class="paramref">right</code>.
    - id: right
      type: Jelly.Bit
      description: The value to compare with <code class="paramref">left</code>.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if <code class="paramref">left</code> is not equal to <code class="paramref">right</code>; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Shared Operator <>(left As Bit, right As Bit) As Boolean
  overload: Jelly.Bit.op_Inequality*
  implements:
  - System.Numerics.IEqualityOperators{Jelly.Bit,Jelly.Bit,System.Boolean}.op_Inequality(Jelly.Bit,Jelly.Bit)
  nameWithType.vb: Bit.<>(Bit, Bit)
  fullName.vb: Jelly.Bit.<>(Jelly.Bit, Jelly.Bit)
  name.vb: <>(Bit, Bit)
- uid: Jelly.Bit.op_ExclusiveOr(Jelly.Bit,Jelly.Bit)
  commentId: M:Jelly.Bit.op_ExclusiveOr(Jelly.Bit,Jelly.Bit)
  id: op_ExclusiveOr(Jelly.Bit,Jelly.Bit)
  parent: Jelly.Bit
  langs:
  - csharp
  - vb
  name: operator ^(Bit, Bit)
  nameWithType: Bit.operator ^(Bit, Bit)
  fullName: Jelly.Bit.operator ^(Jelly.Bit, Jelly.Bit)
  type: Operator
  source:
    remote:
      path: Jelly/Bit.cs
      branch: dev
      repo: https://github.com/tmaster-terrarian/Jelly.git
    id: op_ExclusiveOr
    path: ../Jelly/Bit.cs
    startLine: 51
  assemblies:
  - Jelly
  namespace: Jelly
  summary: Computes the exclusive-or of two values.
  example: []
  syntax:
    content: public static Bit operator ^(Bit left, Bit right)
    parameters:
    - id: left
      type: Jelly.Bit
      description: The value to xor with <code class="paramref">right</code>.
    - id: right
      type: Jelly.Bit
      description: The value to xor with <code class="paramref">left</code>.
    return:
      type: Jelly.Bit
      description: The exclusive-or of <code class="paramref">left</code> and <code class="paramref">right</code>.
    content.vb: Public Shared Operator Xor(left As Bit, right As Bit) As Bit
  overload: Jelly.Bit.op_ExclusiveOr*
  implements:
  - System.Numerics.IBitwiseOperators{Jelly.Bit,Jelly.Bit,Jelly.Bit}.op_ExclusiveOr(Jelly.Bit,Jelly.Bit)
  nameWithType.vb: Bit.Xor(Bit, Bit)
  fullName.vb: Jelly.Bit.Xor(Jelly.Bit, Jelly.Bit)
  name.vb: Xor(Bit, Bit)
- uid: Jelly.Bit.op_BitwiseAnd(Jelly.Bit,Jelly.Bit)
  commentId: M:Jelly.Bit.op_BitwiseAnd(Jelly.Bit,Jelly.Bit)
  id: op_BitwiseAnd(Jelly.Bit,Jelly.Bit)
  parent: Jelly.Bit
  langs:
  - csharp
  - vb
  name: operator &(Bit, Bit)
  nameWithType: Bit.operator &(Bit, Bit)
  fullName: Jelly.Bit.operator &(Jelly.Bit, Jelly.Bit)
  type: Operator
  source:
    remote:
      path: Jelly/Bit.cs
      branch: dev
      repo: https://github.com/tmaster-terrarian/Jelly.git
    id: op_BitwiseAnd
    path: ../Jelly/Bit.cs
    startLine: 56
  assemblies:
  - Jelly
  namespace: Jelly
  summary: Computes the bitwise-and of two values.
  example: []
  syntax:
    content: public static Bit operator &(Bit left, Bit right)
    parameters:
    - id: left
      type: Jelly.Bit
      description: The value to <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/operators/patterns#logical-patterns">and</a> with <code class="paramref">right</code>.
    - id: right
      type: Jelly.Bit
      description: The value to <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/operators/patterns#logical-patterns">and</a> with <code class="paramref">left</code>.
    return:
      type: Jelly.Bit
      description: The bitwise-and of <code class="paramref">left</code> and <code class="paramref">right</code>.
    content.vb: Public Shared Operator And(left As Bit, right As Bit) As Bit
  overload: Jelly.Bit.op_BitwiseAnd*
  implements:
  - System.Numerics.IBitwiseOperators{Jelly.Bit,Jelly.Bit,Jelly.Bit}.op_BitwiseAnd(Jelly.Bit,Jelly.Bit)
  nameWithType.vb: Bit.And(Bit, Bit)
  fullName.vb: Jelly.Bit.And(Jelly.Bit, Jelly.Bit)
  name.vb: And(Bit, Bit)
- uid: Jelly.Bit.op_BitwiseOr(Jelly.Bit,Jelly.Bit)
  commentId: M:Jelly.Bit.op_BitwiseOr(Jelly.Bit,Jelly.Bit)
  id: op_BitwiseOr(Jelly.Bit,Jelly.Bit)
  parent: Jelly.Bit
  langs:
  - csharp
  - vb
  name: operator |(Bit, Bit)
  nameWithType: Bit.operator |(Bit, Bit)
  fullName: Jelly.Bit.operator |(Jelly.Bit, Jelly.Bit)
  type: Operator
  source:
    remote:
      path: Jelly/Bit.cs
      branch: dev
      repo: https://github.com/tmaster-terrarian/Jelly.git
    id: op_BitwiseOr
    path: ../Jelly/Bit.cs
    startLine: 61
  assemblies:
  - Jelly
  namespace: Jelly
  summary: Computes the bitwise-or of two values.
  example: []
  syntax:
    content: public static Bit operator |(Bit left, Bit right)
    parameters:
    - id: left
      type: Jelly.Bit
      description: The value to <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/operators/patterns#logical-patterns">or</a> with <code class="paramref">right</code>.
    - id: right
      type: Jelly.Bit
      description: The value to <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/operators/patterns#logical-patterns">or</a> with <code class="paramref">left</code>.
    return:
      type: Jelly.Bit
      description: The bitwise-or of <code class="paramref">left</code> and <code class="paramref">right</code>.
    content.vb: Public Shared Operator Or(left As Bit, right As Bit) As Bit
  overload: Jelly.Bit.op_BitwiseOr*
  implements:
  - System.Numerics.IBitwiseOperators{Jelly.Bit,Jelly.Bit,Jelly.Bit}.op_BitwiseOr(Jelly.Bit,Jelly.Bit)
  nameWithType.vb: Bit.Or(Bit, Bit)
  fullName.vb: Jelly.Bit.Or(Jelly.Bit, Jelly.Bit)
  name.vb: Or(Bit, Bit)
- uid: Jelly.Bit.op_OnesComplement(Jelly.Bit)
  commentId: M:Jelly.Bit.op_OnesComplement(Jelly.Bit)
  id: op_OnesComplement(Jelly.Bit)
  parent: Jelly.Bit
  langs:
  - csharp
  - vb
  name: operator ~(Bit)
  nameWithType: Bit.operator ~(Bit)
  fullName: Jelly.Bit.operator ~(Jelly.Bit)
  type: Operator
  source:
    remote:
      path: Jelly/Bit.cs
      branch: dev
      repo: https://github.com/tmaster-terrarian/Jelly.git
    id: op_OnesComplement
    path: ../Jelly/Bit.cs
    startLine: 66
  assemblies:
  - Jelly
  namespace: Jelly
  summary: Computes the ones-complement representation of a given value.
  example: []
  syntax:
    content: public static Bit operator ~(Bit value)
    parameters:
    - id: value
      type: Jelly.Bit
      description: The value for which to compute the ones-complement.
    return:
      type: Jelly.Bit
      description: The ones-complement of <code class="paramref">value</code>.
    content.vb: Public Shared Operator Not(value As Bit) As Bit
  overload: Jelly.Bit.op_OnesComplement*
  implements:
  - System.Numerics.IBitwiseOperators{Jelly.Bit,Jelly.Bit,Jelly.Bit}.op_OnesComplement(Jelly.Bit)
  nameWithType.vb: Bit.Not(Bit)
  fullName.vb: Jelly.Bit.Not(Jelly.Bit)
  name.vb: Not(Bit)
- uid: Jelly.Bit.op_Modulus(Jelly.Bit,Jelly.Bit)
  commentId: M:Jelly.Bit.op_Modulus(Jelly.Bit,Jelly.Bit)
  id: op_Modulus(Jelly.Bit,Jelly.Bit)
  parent: Jelly.Bit
  langs:
  - csharp
  - vb
  name: operator %(Bit, Bit)
  nameWithType: Bit.operator %(Bit, Bit)
  fullName: Jelly.Bit.operator %(Jelly.Bit, Jelly.Bit)
  type: Operator
  source:
    remote:
      path: Jelly/Bit.cs
      branch: dev
      repo: https://github.com/tmaster-terrarian/Jelly.git
    id: op_Modulus
    path: ../Jelly/Bit.cs
    startLine: 71
  assemblies:
  - Jelly
  namespace: Jelly
  summary: Divides two values together to compute their modulus or remainder.
  example: []
  syntax:
    content: public static Bit operator %(Bit left, Bit right)
    parameters:
    - id: left
      type: Jelly.Bit
      description: The value which <code class="paramref">right</code> divides.
    - id: right
      type: Jelly.Bit
      description: The value which divides <code class="paramref">left</code>.
    return:
      type: Jelly.Bit
      description: The modulus or remainder of <code class="paramref">left</code> divided by <code class="paramref">right</code>.
    content.vb: Public Shared Operator Mod(left As Bit, right As Bit) As Bit
  overload: Jelly.Bit.op_Modulus*
  implements:
  - System.Numerics.IModulusOperators{Jelly.Bit,Jelly.Bit,Jelly.Bit}.op_Modulus(Jelly.Bit,Jelly.Bit)
  nameWithType.vb: Bit.Mod(Bit, Bit)
  fullName.vb: Jelly.Bit.Mod(Jelly.Bit, Jelly.Bit)
  name.vb: Mod(Bit, Bit)
- uid: Jelly.Bit.Equals(System.Object)
  commentId: M:Jelly.Bit.Equals(System.Object)
  id: Equals(System.Object)
  parent: Jelly.Bit
  langs:
  - csharp
  - vb
  name: Equals(object)
  nameWithType: Bit.Equals(object)
  fullName: Jelly.Bit.Equals(object)
  type: Method
  source:
    remote:
      path: Jelly/Bit.cs
      branch: dev
      repo: https://github.com/tmaster-terrarian/Jelly.git
    id: Equals
    path: ../Jelly/Bit.cs
    startLine: 76
  assemblies:
  - Jelly
  namespace: Jelly
  summary: Indicates whether this instance and a specified object are equal.
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare with the current instance.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if <code class="paramref">obj</code> and this instance are the same type and represent the same value; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: Jelly.Bit.Equals*
  nameWithType.vb: Bit.Equals(Object)
  fullName.vb: Jelly.Bit.Equals(Object)
  name.vb: Equals(Object)
- uid: Jelly.Bit.op_Implicit(System.Boolean)~Jelly.Bit
  commentId: M:Jelly.Bit.op_Implicit(System.Boolean)~Jelly.Bit
  id: op_Implicit(System.Boolean)~Jelly.Bit
  parent: Jelly.Bit
  langs:
  - csharp
  - vb
  name: implicit operator Bit(bool)
  nameWithType: Bit.implicit operator Bit(bool)
  fullName: Jelly.Bit.implicit operator Jelly.Bit(bool)
  type: Operator
  source:
    remote:
      path: Jelly/Bit.cs
      branch: dev
      repo: https://github.com/tmaster-terrarian/Jelly.git
    id: op_Implicit
    path: ../Jelly/Bit.cs
    startLine: 81
  assemblies:
  - Jelly
  namespace: Jelly
  syntax:
    content: public static implicit operator Bit(bool value)
    parameters:
    - id: value
      type: System.Boolean
    return:
      type: Jelly.Bit
    content.vb: Public Shared Widening Operator CType(value As Boolean) As Bit
  overload: Jelly.Bit.op_Implicit*
  nameWithType.vb: Bit.CType(Boolean)
  fullName.vb: Jelly.Bit.CType(Boolean)
  name.vb: CType(Boolean)
- uid: Jelly.Bit.op_Implicit(System.Int32)~Jelly.Bit
  commentId: M:Jelly.Bit.op_Implicit(System.Int32)~Jelly.Bit
  id: op_Implicit(System.Int32)~Jelly.Bit
  parent: Jelly.Bit
  langs:
  - csharp
  - vb
  name: implicit operator Bit(int)
  nameWithType: Bit.implicit operator Bit(int)
  fullName: Jelly.Bit.implicit operator Jelly.Bit(int)
  type: Operator
  source:
    remote:
      path: Jelly/Bit.cs
      branch: dev
      repo: https://github.com/tmaster-terrarian/Jelly.git
    id: op_Implicit
    path: ../Jelly/Bit.cs
    startLine: 90
  assemblies:
  - Jelly
  namespace: Jelly
  summary: Uses the first bit of <code><code class="paramref">value</code></code>
  example: []
  syntax:
    content: public static implicit operator Bit(int value)
    parameters:
    - id: value
      type: System.Int32
      description: ''
    return:
      type: Jelly.Bit
    content.vb: Public Shared Widening Operator CType(value As Integer) As Bit
  overload: Jelly.Bit.op_Implicit*
  nameWithType.vb: Bit.CType(Integer)
  fullName.vb: Jelly.Bit.CType(Integer)
  name.vb: CType(Integer)
- uid: Jelly.Bit.op_Explicit(Jelly.Bit)~System.Boolean
  commentId: M:Jelly.Bit.op_Explicit(Jelly.Bit)~System.Boolean
  id: op_Explicit(Jelly.Bit)~System.Boolean
  parent: Jelly.Bit
  langs:
  - csharp
  - vb
  name: explicit operator bool(Bit)
  nameWithType: Bit.explicit operator bool(Bit)
  fullName: Jelly.Bit.explicit operator bool(Jelly.Bit)
  type: Operator
  source:
    remote:
      path: Jelly/Bit.cs
      branch: dev
      repo: https://github.com/tmaster-terrarian/Jelly.git
    id: op_Explicit
    path: ../Jelly/Bit.cs
    startLine: 95
  assemblies:
  - Jelly
  namespace: Jelly
  syntax:
    content: public static explicit operator bool(Bit value)
    parameters:
    - id: value
      type: Jelly.Bit
    return:
      type: System.Boolean
    content.vb: Public Shared Narrowing Operator CType(value As Bit) As Boolean
  overload: Jelly.Bit.op_Explicit*
  nameWithType.vb: Bit.CType(Bit)
  fullName.vb: Jelly.Bit.CType(Jelly.Bit)
  name.vb: CType(Bit)
- uid: Jelly.Bit.op_Explicit(Jelly.Bit)~System.Byte
  commentId: M:Jelly.Bit.op_Explicit(Jelly.Bit)~System.Byte
  id: op_Explicit(Jelly.Bit)~System.Byte
  parent: Jelly.Bit
  langs:
  - csharp
  - vb
  name: explicit operator byte(Bit)
  nameWithType: Bit.explicit operator byte(Bit)
  fullName: Jelly.Bit.explicit operator byte(Jelly.Bit)
  type: Operator
  source:
    remote:
      path: Jelly/Bit.cs
      branch: dev
      repo: https://github.com/tmaster-terrarian/Jelly.git
    id: op_Explicit
    path: ../Jelly/Bit.cs
    startLine: 100
  assemblies:
  - Jelly
  namespace: Jelly
  syntax:
    content: public static explicit operator byte(Bit value)
    parameters:
    - id: value
      type: Jelly.Bit
    return:
      type: System.Byte
    content.vb: Public Shared Narrowing Operator CType(value As Bit) As Byte
  overload: Jelly.Bit.op_Explicit*
  nameWithType.vb: Bit.CType(Bit)
  fullName.vb: Jelly.Bit.CType(Jelly.Bit)
  name.vb: CType(Bit)
- uid: Jelly.Bit.op_Explicit(Jelly.Bit)~System.SByte
  commentId: M:Jelly.Bit.op_Explicit(Jelly.Bit)~System.SByte
  id: op_Explicit(Jelly.Bit)~System.SByte
  parent: Jelly.Bit
  langs:
  - csharp
  - vb
  name: explicit operator sbyte(Bit)
  nameWithType: Bit.explicit operator sbyte(Bit)
  fullName: Jelly.Bit.explicit operator sbyte(Jelly.Bit)
  type: Operator
  source:
    remote:
      path: Jelly/Bit.cs
      branch: dev
      repo: https://github.com/tmaster-terrarian/Jelly.git
    id: op_Explicit
    path: ../Jelly/Bit.cs
    startLine: 105
  assemblies:
  - Jelly
  namespace: Jelly
  syntax:
    content: public static explicit operator sbyte(Bit value)
    parameters:
    - id: value
      type: Jelly.Bit
    return:
      type: System.SByte
    content.vb: Public Shared Narrowing Operator CType(value As Bit) As SByte
  overload: Jelly.Bit.op_Explicit*
  nameWithType.vb: Bit.CType(Bit)
  fullName.vb: Jelly.Bit.CType(Jelly.Bit)
  name.vb: CType(Bit)
- uid: Jelly.Bit.op_Explicit(Jelly.Bit)~System.UInt16
  commentId: M:Jelly.Bit.op_Explicit(Jelly.Bit)~System.UInt16
  id: op_Explicit(Jelly.Bit)~System.UInt16
  parent: Jelly.Bit
  langs:
  - csharp
  - vb
  name: explicit operator ushort(Bit)
  nameWithType: Bit.explicit operator ushort(Bit)
  fullName: Jelly.Bit.explicit operator ushort(Jelly.Bit)
  type: Operator
  source:
    remote:
      path: Jelly/Bit.cs
      branch: dev
      repo: https://github.com/tmaster-terrarian/Jelly.git
    id: op_Explicit
    path: ../Jelly/Bit.cs
    startLine: 110
  assemblies:
  - Jelly
  namespace: Jelly
  syntax:
    content: public static explicit operator ushort(Bit value)
    parameters:
    - id: value
      type: Jelly.Bit
    return:
      type: System.UInt16
    content.vb: Public Shared Narrowing Operator CType(value As Bit) As UShort
  overload: Jelly.Bit.op_Explicit*
  nameWithType.vb: Bit.CType(Bit)
  fullName.vb: Jelly.Bit.CType(Jelly.Bit)
  name.vb: CType(Bit)
- uid: Jelly.Bit.op_Explicit(Jelly.Bit)~System.Int16
  commentId: M:Jelly.Bit.op_Explicit(Jelly.Bit)~System.Int16
  id: op_Explicit(Jelly.Bit)~System.Int16
  parent: Jelly.Bit
  langs:
  - csharp
  - vb
  name: explicit operator short(Bit)
  nameWithType: Bit.explicit operator short(Bit)
  fullName: Jelly.Bit.explicit operator short(Jelly.Bit)
  type: Operator
  source:
    remote:
      path: Jelly/Bit.cs
      branch: dev
      repo: https://github.com/tmaster-terrarian/Jelly.git
    id: op_Explicit
    path: ../Jelly/Bit.cs
    startLine: 115
  assemblies:
  - Jelly
  namespace: Jelly
  syntax:
    content: public static explicit operator short(Bit value)
    parameters:
    - id: value
      type: Jelly.Bit
    return:
      type: System.Int16
    content.vb: Public Shared Narrowing Operator CType(value As Bit) As Short
  overload: Jelly.Bit.op_Explicit*
  nameWithType.vb: Bit.CType(Bit)
  fullName.vb: Jelly.Bit.CType(Jelly.Bit)
  name.vb: CType(Bit)
- uid: Jelly.Bit.op_Explicit(Jelly.Bit)~System.UInt32
  commentId: M:Jelly.Bit.op_Explicit(Jelly.Bit)~System.UInt32
  id: op_Explicit(Jelly.Bit)~System.UInt32
  parent: Jelly.Bit
  langs:
  - csharp
  - vb
  name: explicit operator uint(Bit)
  nameWithType: Bit.explicit operator uint(Bit)
  fullName: Jelly.Bit.explicit operator uint(Jelly.Bit)
  type: Operator
  source:
    remote:
      path: Jelly/Bit.cs
      branch: dev
      repo: https://github.com/tmaster-terrarian/Jelly.git
    id: op_Explicit
    path: ../Jelly/Bit.cs
    startLine: 120
  assemblies:
  - Jelly
  namespace: Jelly
  syntax:
    content: public static explicit operator uint(Bit value)
    parameters:
    - id: value
      type: Jelly.Bit
    return:
      type: System.UInt32
    content.vb: Public Shared Narrowing Operator CType(value As Bit) As UInteger
  overload: Jelly.Bit.op_Explicit*
  nameWithType.vb: Bit.CType(Bit)
  fullName.vb: Jelly.Bit.CType(Jelly.Bit)
  name.vb: CType(Bit)
- uid: Jelly.Bit.op_Explicit(Jelly.Bit)~System.Int32
  commentId: M:Jelly.Bit.op_Explicit(Jelly.Bit)~System.Int32
  id: op_Explicit(Jelly.Bit)~System.Int32
  parent: Jelly.Bit
  langs:
  - csharp
  - vb
  name: explicit operator int(Bit)
  nameWithType: Bit.explicit operator int(Bit)
  fullName: Jelly.Bit.explicit operator int(Jelly.Bit)
  type: Operator
  source:
    remote:
      path: Jelly/Bit.cs
      branch: dev
      repo: https://github.com/tmaster-terrarian/Jelly.git
    id: op_Explicit
    path: ../Jelly/Bit.cs
    startLine: 125
  assemblies:
  - Jelly
  namespace: Jelly
  syntax:
    content: public static explicit operator int(Bit value)
    parameters:
    - id: value
      type: Jelly.Bit
    return:
      type: System.Int32
    content.vb: Public Shared Narrowing Operator CType(value As Bit) As Integer
  overload: Jelly.Bit.op_Explicit*
  nameWithType.vb: Bit.CType(Bit)
  fullName.vb: Jelly.Bit.CType(Jelly.Bit)
  name.vb: CType(Bit)
- uid: Jelly.Bit.op_Explicit(Jelly.Bit)~System.UInt64
  commentId: M:Jelly.Bit.op_Explicit(Jelly.Bit)~System.UInt64
  id: op_Explicit(Jelly.Bit)~System.UInt64
  parent: Jelly.Bit
  langs:
  - csharp
  - vb
  name: explicit operator ulong(Bit)
  nameWithType: Bit.explicit operator ulong(Bit)
  fullName: Jelly.Bit.explicit operator ulong(Jelly.Bit)
  type: Operator
  source:
    remote:
      path: Jelly/Bit.cs
      branch: dev
      repo: https://github.com/tmaster-terrarian/Jelly.git
    id: op_Explicit
    path: ../Jelly/Bit.cs
    startLine: 130
  assemblies:
  - Jelly
  namespace: Jelly
  syntax:
    content: public static explicit operator ulong(Bit value)
    parameters:
    - id: value
      type: Jelly.Bit
    return:
      type: System.UInt64
    content.vb: Public Shared Narrowing Operator CType(value As Bit) As ULong
  overload: Jelly.Bit.op_Explicit*
  nameWithType.vb: Bit.CType(Bit)
  fullName.vb: Jelly.Bit.CType(Jelly.Bit)
  name.vb: CType(Bit)
- uid: Jelly.Bit.op_Explicit(Jelly.Bit)~System.Int64
  commentId: M:Jelly.Bit.op_Explicit(Jelly.Bit)~System.Int64
  id: op_Explicit(Jelly.Bit)~System.Int64
  parent: Jelly.Bit
  langs:
  - csharp
  - vb
  name: explicit operator long(Bit)
  nameWithType: Bit.explicit operator long(Bit)
  fullName: Jelly.Bit.explicit operator long(Jelly.Bit)
  type: Operator
  source:
    remote:
      path: Jelly/Bit.cs
      branch: dev
      repo: https://github.com/tmaster-terrarian/Jelly.git
    id: op_Explicit
    path: ../Jelly/Bit.cs
    startLine: 135
  assemblies:
  - Jelly
  namespace: Jelly
  syntax:
    content: public static explicit operator long(Bit value)
    parameters:
    - id: value
      type: Jelly.Bit
    return:
      type: System.Int64
    content.vb: Public Shared Narrowing Operator CType(value As Bit) As Long
  overload: Jelly.Bit.op_Explicit*
  nameWithType.vb: Bit.CType(Bit)
  fullName.vb: Jelly.Bit.CType(Jelly.Bit)
  name.vb: CType(Bit)
- uid: Jelly.Bit.op_LessThan(Jelly.Bit,Jelly.Bit)
  commentId: M:Jelly.Bit.op_LessThan(Jelly.Bit,Jelly.Bit)
  id: op_LessThan(Jelly.Bit,Jelly.Bit)
  parent: Jelly.Bit
  langs:
  - csharp
  - vb
  name: operator <(Bit, Bit)
  nameWithType: Bit.operator <(Bit, Bit)
  fullName: Jelly.Bit.operator <(Jelly.Bit, Jelly.Bit)
  type: Operator
  source:
    remote:
      path: Jelly/Bit.cs
      branch: dev
      repo: https://github.com/tmaster-terrarian/Jelly.git
    id: op_LessThan
    path: ../Jelly/Bit.cs
    startLine: 140
  assemblies:
  - Jelly
  namespace: Jelly
  summary: Compares two values to determine which is less.
  example: []
  syntax:
    content: public static bool operator <(Bit left, Bit right)
    parameters:
    - id: left
      type: Jelly.Bit
      description: The value to compare with <code class="paramref">right</code>.
    - id: right
      type: Jelly.Bit
      description: The value to compare with <code class="paramref">left</code>.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if <code class="paramref">left</code> is less than <code class="paramref">right</code>; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Shared Operator <(left As Bit, right As Bit) As Boolean
  overload: Jelly.Bit.op_LessThan*
  implements:
  - System.Numerics.IComparisonOperators{Jelly.Bit,Jelly.Bit,System.Boolean}.op_LessThan(Jelly.Bit,Jelly.Bit)
  nameWithType.vb: Bit.<(Bit, Bit)
  fullName.vb: Jelly.Bit.<(Jelly.Bit, Jelly.Bit)
  name.vb: <(Bit, Bit)
- uid: Jelly.Bit.op_LessThanOrEqual(Jelly.Bit,Jelly.Bit)
  commentId: M:Jelly.Bit.op_LessThanOrEqual(Jelly.Bit,Jelly.Bit)
  id: op_LessThanOrEqual(Jelly.Bit,Jelly.Bit)
  parent: Jelly.Bit
  langs:
  - csharp
  - vb
  name: operator <=(Bit, Bit)
  nameWithType: Bit.operator <=(Bit, Bit)
  fullName: Jelly.Bit.operator <=(Jelly.Bit, Jelly.Bit)
  type: Operator
  source:
    remote:
      path: Jelly/Bit.cs
      branch: dev
      repo: https://github.com/tmaster-terrarian/Jelly.git
    id: op_LessThanOrEqual
    path: ../Jelly/Bit.cs
    startLine: 145
  assemblies:
  - Jelly
  namespace: Jelly
  summary: Compares two values to determine which is less or equal.
  example: []
  syntax:
    content: public static bool operator <=(Bit left, Bit right)
    parameters:
    - id: left
      type: Jelly.Bit
      description: The value to compare with <code class="paramref">right</code>.
    - id: right
      type: Jelly.Bit
      description: The value to compare with <code class="paramref">left</code>.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if <code class="paramref">left</code> is less than or equal to <code class="paramref">right</code>; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Shared Operator <=(left As Bit, right As Bit) As Boolean
  overload: Jelly.Bit.op_LessThanOrEqual*
  implements:
  - System.Numerics.IComparisonOperators{Jelly.Bit,Jelly.Bit,System.Boolean}.op_LessThanOrEqual(Jelly.Bit,Jelly.Bit)
  nameWithType.vb: Bit.<=(Bit, Bit)
  fullName.vb: Jelly.Bit.<=(Jelly.Bit, Jelly.Bit)
  name.vb: <=(Bit, Bit)
- uid: Jelly.Bit.op_GreaterThan(Jelly.Bit,Jelly.Bit)
  commentId: M:Jelly.Bit.op_GreaterThan(Jelly.Bit,Jelly.Bit)
  id: op_GreaterThan(Jelly.Bit,Jelly.Bit)
  parent: Jelly.Bit
  langs:
  - csharp
  - vb
  name: operator >(Bit, Bit)
  nameWithType: Bit.operator >(Bit, Bit)
  fullName: Jelly.Bit.operator >(Jelly.Bit, Jelly.Bit)
  type: Operator
  source:
    remote:
      path: Jelly/Bit.cs
      branch: dev
      repo: https://github.com/tmaster-terrarian/Jelly.git
    id: op_GreaterThan
    path: ../Jelly/Bit.cs
    startLine: 150
  assemblies:
  - Jelly
  namespace: Jelly
  summary: Compares two values to determine which is greater.
  example: []
  syntax:
    content: public static bool operator >(Bit left, Bit right)
    parameters:
    - id: left
      type: Jelly.Bit
      description: The value to compare with <code class="paramref">right</code>.
    - id: right
      type: Jelly.Bit
      description: The value to compare with <code class="paramref">left</code>.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if <code class="paramref">left</code> is greater than <code class="paramref">right</code>; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Shared Operator >(left As Bit, right As Bit) As Boolean
  overload: Jelly.Bit.op_GreaterThan*
  implements:
  - System.Numerics.IComparisonOperators{Jelly.Bit,Jelly.Bit,System.Boolean}.op_GreaterThan(Jelly.Bit,Jelly.Bit)
  nameWithType.vb: Bit.>(Bit, Bit)
  fullName.vb: Jelly.Bit.>(Jelly.Bit, Jelly.Bit)
  name.vb: '>(Bit, Bit)'
- uid: Jelly.Bit.op_GreaterThanOrEqual(Jelly.Bit,Jelly.Bit)
  commentId: M:Jelly.Bit.op_GreaterThanOrEqual(Jelly.Bit,Jelly.Bit)
  id: op_GreaterThanOrEqual(Jelly.Bit,Jelly.Bit)
  parent: Jelly.Bit
  langs:
  - csharp
  - vb
  name: operator >=(Bit, Bit)
  nameWithType: Bit.operator >=(Bit, Bit)
  fullName: Jelly.Bit.operator >=(Jelly.Bit, Jelly.Bit)
  type: Operator
  source:
    remote:
      path: Jelly/Bit.cs
      branch: dev
      repo: https://github.com/tmaster-terrarian/Jelly.git
    id: op_GreaterThanOrEqual
    path: ../Jelly/Bit.cs
    startLine: 155
  assemblies:
  - Jelly
  namespace: Jelly
  summary: Compares two values to determine which is greater or equal.
  example: []
  syntax:
    content: public static bool operator >=(Bit left, Bit right)
    parameters:
    - id: left
      type: Jelly.Bit
      description: The value to compare with <code class="paramref">right</code>.
    - id: right
      type: Jelly.Bit
      description: The value to compare with <code class="paramref">left</code>.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if <code class="paramref">left</code> is greater than or equal to <code class="paramref">right</code>; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Shared Operator >=(left As Bit, right As Bit) As Boolean
  overload: Jelly.Bit.op_GreaterThanOrEqual*
  implements:
  - System.Numerics.IComparisonOperators{Jelly.Bit,Jelly.Bit,System.Boolean}.op_GreaterThanOrEqual(Jelly.Bit,Jelly.Bit)
  nameWithType.vb: Bit.>=(Bit, Bit)
  fullName.vb: Jelly.Bit.>=(Jelly.Bit, Jelly.Bit)
  name.vb: '>=(Bit, Bit)'
- uid: Jelly.Bit.op_LogicalNot(Jelly.Bit)
  commentId: M:Jelly.Bit.op_LogicalNot(Jelly.Bit)
  id: op_LogicalNot(Jelly.Bit)
  parent: Jelly.Bit
  langs:
  - csharp
  - vb
  name: operator !(Bit)
  nameWithType: Bit.operator !(Bit)
  fullName: Jelly.Bit.operator !(Jelly.Bit)
  type: Operator
  source:
    remote:
      path: Jelly/Bit.cs
      branch: dev
      repo: https://github.com/tmaster-terrarian/Jelly.git
    id: op_LogicalNot
    path: ../Jelly/Bit.cs
    startLine: 160
  assemblies:
  - Jelly
  namespace: Jelly
  syntax:
    content: public static Bit operator !(Bit value)
    parameters:
    - id: value
      type: Jelly.Bit
    return:
      type: Jelly.Bit
    content.vb: Public Shared Operator Not(value As Bit) As Bit
  overload: Jelly.Bit.op_LogicalNot*
  nameWithType.vb: Bit.Not(Bit)
  fullName.vb: Jelly.Bit.Not(Jelly.Bit)
  name.vb: Not(Bit)
references:
- uid: Jelly
  commentId: N:Jelly
  href: Jelly.html
  name: Jelly
  nameWithType: Jelly
  fullName: Jelly
- uid: System.IComparable{Jelly.Bit}
  commentId: T:System.IComparable{Jelly.Bit}
  parent: System
  definition: System.IComparable`1
  href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  name: IComparable<Bit>
  nameWithType: IComparable<Bit>
  fullName: System.IComparable<Jelly.Bit>
  nameWithType.vb: IComparable(Of Bit)
  fullName.vb: System.IComparable(Of Jelly.Bit)
  name.vb: IComparable(Of Bit)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  - name: <
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  - name: (
  - name: Of
  - name: " "
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: )
- uid: System.IEquatable{Jelly.Bit}
  commentId: T:System.IEquatable{Jelly.Bit}
  parent: System
  definition: System.IEquatable`1
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<Bit>
  nameWithType: IEquatable<Bit>
  fullName: System.IEquatable<Jelly.Bit>
  nameWithType.vb: IEquatable(Of Bit)
  fullName.vb: System.IEquatable(Of Jelly.Bit)
  name.vb: IEquatable(Of Bit)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: )
- uid: System.IEquatable{System.Boolean}
  commentId: T:System.IEquatable{System.Boolean}
  parent: System
  definition: System.IEquatable`1
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<bool>
  nameWithType: IEquatable<bool>
  fullName: System.IEquatable<bool>
  nameWithType.vb: IEquatable(Of Boolean)
  fullName.vb: System.IEquatable(Of Boolean)
  name.vb: IEquatable(Of Boolean)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Numerics.IBitwiseOperators{Jelly.Bit,Jelly.Bit,Jelly.Bit}
  commentId: T:System.Numerics.IBitwiseOperators{Jelly.Bit,Jelly.Bit,Jelly.Bit}
  parent: System.Numerics
  definition: System.Numerics.IBitwiseOperators`3
  href: https://learn.microsoft.com/dotnet/api/system.numerics.ibitwiseoperators-3
  name: IBitwiseOperators<Bit, Bit, Bit>
  nameWithType: IBitwiseOperators<Bit, Bit, Bit>
  fullName: System.Numerics.IBitwiseOperators<Jelly.Bit, Jelly.Bit, Jelly.Bit>
  nameWithType.vb: IBitwiseOperators(Of Bit, Bit, Bit)
  fullName.vb: System.Numerics.IBitwiseOperators(Of Jelly.Bit, Jelly.Bit, Jelly.Bit)
  name.vb: IBitwiseOperators(Of Bit, Bit, Bit)
  spec.csharp:
  - uid: System.Numerics.IBitwiseOperators`3
    name: IBitwiseOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.ibitwiseoperators-3
  - name: <
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: ','
  - name: " "
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: ','
  - name: " "
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: '>'
  spec.vb:
  - uid: System.Numerics.IBitwiseOperators`3
    name: IBitwiseOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.ibitwiseoperators-3
  - name: (
  - name: Of
  - name: " "
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: ','
  - name: " "
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: ','
  - name: " "
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: )
- uid: System.Numerics.IComparisonOperators{Jelly.Bit,Jelly.Bit,System.Boolean}
  commentId: T:System.Numerics.IComparisonOperators{Jelly.Bit,Jelly.Bit,System.Boolean}
  parent: System.Numerics
  definition: System.Numerics.IComparisonOperators`3
  href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3
  name: IComparisonOperators<Bit, Bit, bool>
  nameWithType: IComparisonOperators<Bit, Bit, bool>
  fullName: System.Numerics.IComparisonOperators<Jelly.Bit, Jelly.Bit, bool>
  nameWithType.vb: IComparisonOperators(Of Bit, Bit, Boolean)
  fullName.vb: System.Numerics.IComparisonOperators(Of Jelly.Bit, Jelly.Bit, Boolean)
  name.vb: IComparisonOperators(Of Bit, Bit, Boolean)
  spec.csharp:
  - uid: System.Numerics.IComparisonOperators`3
    name: IComparisonOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3
  - name: <
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: ','
  - name: " "
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Numerics.IComparisonOperators`3
    name: IComparisonOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3
  - name: (
  - name: Of
  - name: " "
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: ','
  - name: " "
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Numerics.IEqualityOperators{Jelly.Bit,Jelly.Bit,System.Boolean}
  commentId: T:System.Numerics.IEqualityOperators{Jelly.Bit,Jelly.Bit,System.Boolean}
  parent: System.Numerics
  definition: System.Numerics.IEqualityOperators`3
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3
  name: IEqualityOperators<Bit, Bit, bool>
  nameWithType: IEqualityOperators<Bit, Bit, bool>
  fullName: System.Numerics.IEqualityOperators<Jelly.Bit, Jelly.Bit, bool>
  nameWithType.vb: IEqualityOperators(Of Bit, Bit, Boolean)
  fullName.vb: System.Numerics.IEqualityOperators(Of Jelly.Bit, Jelly.Bit, Boolean)
  name.vb: IEqualityOperators(Of Bit, Bit, Boolean)
  spec.csharp:
  - uid: System.Numerics.IEqualityOperators`3
    name: IEqualityOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3
  - name: <
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: ','
  - name: " "
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Numerics.IEqualityOperators`3
    name: IEqualityOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3
  - name: (
  - name: Of
  - name: " "
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: ','
  - name: " "
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Numerics.IMinMaxValue{Jelly.Bit}
  commentId: T:System.Numerics.IMinMaxValue{Jelly.Bit}
  parent: System.Numerics
  definition: System.Numerics.IMinMaxValue`1
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iminmaxvalue-1
  name: IMinMaxValue<Bit>
  nameWithType: IMinMaxValue<Bit>
  fullName: System.Numerics.IMinMaxValue<Jelly.Bit>
  nameWithType.vb: IMinMaxValue(Of Bit)
  fullName.vb: System.Numerics.IMinMaxValue(Of Jelly.Bit)
  name.vb: IMinMaxValue(Of Bit)
  spec.csharp:
  - uid: System.Numerics.IMinMaxValue`1
    name: IMinMaxValue
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iminmaxvalue-1
  - name: <
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: '>'
  spec.vb:
  - uid: System.Numerics.IMinMaxValue`1
    name: IMinMaxValue
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iminmaxvalue-1
  - name: (
  - name: Of
  - name: " "
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: )
- uid: System.Numerics.IModulusOperators{Jelly.Bit,Jelly.Bit,Jelly.Bit}
  commentId: T:System.Numerics.IModulusOperators{Jelly.Bit,Jelly.Bit,Jelly.Bit}
  parent: System.Numerics
  definition: System.Numerics.IModulusOperators`3
  href: https://learn.microsoft.com/dotnet/api/system.numerics.imodulusoperators-3
  name: IModulusOperators<Bit, Bit, Bit>
  nameWithType: IModulusOperators<Bit, Bit, Bit>
  fullName: System.Numerics.IModulusOperators<Jelly.Bit, Jelly.Bit, Jelly.Bit>
  nameWithType.vb: IModulusOperators(Of Bit, Bit, Bit)
  fullName.vb: System.Numerics.IModulusOperators(Of Jelly.Bit, Jelly.Bit, Jelly.Bit)
  name.vb: IModulusOperators(Of Bit, Bit, Bit)
  spec.csharp:
  - uid: System.Numerics.IModulusOperators`3
    name: IModulusOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.imodulusoperators-3
  - name: <
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: ','
  - name: " "
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: ','
  - name: " "
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: '>'
  spec.vb:
  - uid: System.Numerics.IModulusOperators`3
    name: IModulusOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.imodulusoperators-3
  - name: (
  - name: Of
  - name: " "
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: ','
  - name: " "
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: ','
  - name: " "
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Numerics.IBitwiseOperators`3
  commentId: T:System.Numerics.IBitwiseOperators`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.ibitwiseoperators-3
  name: IBitwiseOperators<TSelf, TOther, TResult>
  nameWithType: IBitwiseOperators<TSelf, TOther, TResult>
  fullName: System.Numerics.IBitwiseOperators<TSelf, TOther, TResult>
  nameWithType.vb: IBitwiseOperators(Of TSelf, TOther, TResult)
  fullName.vb: System.Numerics.IBitwiseOperators(Of TSelf, TOther, TResult)
  name.vb: IBitwiseOperators(Of TSelf, TOther, TResult)
  spec.csharp:
  - uid: System.Numerics.IBitwiseOperators`3
    name: IBitwiseOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.ibitwiseoperators-3
  - name: <
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Numerics.IBitwiseOperators`3
    name: IBitwiseOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.ibitwiseoperators-3
  - name: (
  - name: Of
  - name: " "
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Numerics
  commentId: N:System.Numerics
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Numerics
  nameWithType: System.Numerics
  fullName: System.Numerics
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Numerics
    name: Numerics
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Numerics
    name: Numerics
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics
- uid: System.Numerics.IComparisonOperators`3
  commentId: T:System.Numerics.IComparisonOperators`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3
  name: IComparisonOperators<TSelf, TOther, TResult>
  nameWithType: IComparisonOperators<TSelf, TOther, TResult>
  fullName: System.Numerics.IComparisonOperators<TSelf, TOther, TResult>
  nameWithType.vb: IComparisonOperators(Of TSelf, TOther, TResult)
  fullName.vb: System.Numerics.IComparisonOperators(Of TSelf, TOther, TResult)
  name.vb: IComparisonOperators(Of TSelf, TOther, TResult)
  spec.csharp:
  - uid: System.Numerics.IComparisonOperators`3
    name: IComparisonOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3
  - name: <
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Numerics.IComparisonOperators`3
    name: IComparisonOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3
  - name: (
  - name: Of
  - name: " "
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Numerics.IEqualityOperators`3
  commentId: T:System.Numerics.IEqualityOperators`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3
  name: IEqualityOperators<TSelf, TOther, TResult>
  nameWithType: IEqualityOperators<TSelf, TOther, TResult>
  fullName: System.Numerics.IEqualityOperators<TSelf, TOther, TResult>
  nameWithType.vb: IEqualityOperators(Of TSelf, TOther, TResult)
  fullName.vb: System.Numerics.IEqualityOperators(Of TSelf, TOther, TResult)
  name.vb: IEqualityOperators(Of TSelf, TOther, TResult)
  spec.csharp:
  - uid: System.Numerics.IEqualityOperators`3
    name: IEqualityOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3
  - name: <
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Numerics.IEqualityOperators`3
    name: IEqualityOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3
  - name: (
  - name: Of
  - name: " "
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Numerics.IMinMaxValue`1
  commentId: T:System.Numerics.IMinMaxValue`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iminmaxvalue-1
  name: IMinMaxValue<TSelf>
  nameWithType: IMinMaxValue<TSelf>
  fullName: System.Numerics.IMinMaxValue<TSelf>
  nameWithType.vb: IMinMaxValue(Of TSelf)
  fullName.vb: System.Numerics.IMinMaxValue(Of TSelf)
  name.vb: IMinMaxValue(Of TSelf)
  spec.csharp:
  - uid: System.Numerics.IMinMaxValue`1
    name: IMinMaxValue
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iminmaxvalue-1
  - name: <
  - name: TSelf
  - name: '>'
  spec.vb:
  - uid: System.Numerics.IMinMaxValue`1
    name: IMinMaxValue
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iminmaxvalue-1
  - name: (
  - name: Of
  - name: " "
  - name: TSelf
  - name: )
- uid: System.Numerics.IModulusOperators`3
  commentId: T:System.Numerics.IModulusOperators`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.imodulusoperators-3
  name: IModulusOperators<TSelf, TOther, TResult>
  nameWithType: IModulusOperators<TSelf, TOther, TResult>
  fullName: System.Numerics.IModulusOperators<TSelf, TOther, TResult>
  nameWithType.vb: IModulusOperators(Of TSelf, TOther, TResult)
  fullName.vb: System.Numerics.IModulusOperators(Of TSelf, TOther, TResult)
  name.vb: IModulusOperators(Of TSelf, TOther, TResult)
  spec.csharp:
  - uid: System.Numerics.IModulusOperators`3
    name: IModulusOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.imodulusoperators-3
  - name: <
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Numerics.IModulusOperators`3
    name: IModulusOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.imodulusoperators-3
  - name: (
  - name: Of
  - name: " "
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Jelly.Bit.#ctor*
  commentId: Overload:Jelly.Bit.#ctor
  href: Jelly.Bit.html#Jelly_Bit__ctor_System_Boolean_
  name: Bit
  nameWithType: Bit.Bit
  fullName: Jelly.Bit.Bit
  nameWithType.vb: Bit.New
  fullName.vb: Jelly.Bit.New
  name.vb: New
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Jelly.Bit.Value*
  commentId: Overload:Jelly.Bit.Value
  href: Jelly.Bit.html#Jelly_Bit_Value
  name: Value
  nameWithType: Bit.Value
  fullName: Jelly.Bit.Value
- uid: Jelly.Bit.MaxValue*
  commentId: Overload:Jelly.Bit.MaxValue
  href: Jelly.Bit.html#Jelly_Bit_MaxValue
  name: MaxValue
  nameWithType: Bit.MaxValue
  fullName: Jelly.Bit.MaxValue
- uid: System.Numerics.IMinMaxValue{Jelly.Bit}.MaxValue
  commentId: P:System.Numerics.IMinMaxValue{Jelly.Bit}.MaxValue
  parent: System.Numerics.IMinMaxValue{Jelly.Bit}
  definition: System.Numerics.IMinMaxValue`1.MaxValue
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iminmaxvalue-1.maxvalue
  name: MaxValue
  nameWithType: IMinMaxValue<Bit>.MaxValue
  fullName: System.Numerics.IMinMaxValue<Jelly.Bit>.MaxValue
  nameWithType.vb: IMinMaxValue(Of Bit).MaxValue
  fullName.vb: System.Numerics.IMinMaxValue(Of Jelly.Bit).MaxValue
- uid: Jelly.Bit
  commentId: T:Jelly.Bit
  parent: Jelly
  href: Jelly.Bit.html
  name: Bit
  nameWithType: Bit
  fullName: Jelly.Bit
- uid: System.Numerics.IMinMaxValue`1.MaxValue
  commentId: P:System.Numerics.IMinMaxValue`1.MaxValue
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iminmaxvalue-1.maxvalue
  name: MaxValue
  nameWithType: IMinMaxValue<TSelf>.MaxValue
  fullName: System.Numerics.IMinMaxValue<TSelf>.MaxValue
  nameWithType.vb: IMinMaxValue(Of TSelf).MaxValue
  fullName.vb: System.Numerics.IMinMaxValue(Of TSelf).MaxValue
- uid: Jelly.Bit.MinValue*
  commentId: Overload:Jelly.Bit.MinValue
  href: Jelly.Bit.html#Jelly_Bit_MinValue
  name: MinValue
  nameWithType: Bit.MinValue
  fullName: Jelly.Bit.MinValue
- uid: System.Numerics.IMinMaxValue{Jelly.Bit}.MinValue
  commentId: P:System.Numerics.IMinMaxValue{Jelly.Bit}.MinValue
  parent: System.Numerics.IMinMaxValue{Jelly.Bit}
  definition: System.Numerics.IMinMaxValue`1.MinValue
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iminmaxvalue-1.minvalue
  name: MinValue
  nameWithType: IMinMaxValue<Bit>.MinValue
  fullName: System.Numerics.IMinMaxValue<Jelly.Bit>.MinValue
  nameWithType.vb: IMinMaxValue(Of Bit).MinValue
  fullName.vb: System.Numerics.IMinMaxValue(Of Jelly.Bit).MinValue
- uid: System.Numerics.IMinMaxValue`1.MinValue
  commentId: P:System.Numerics.IMinMaxValue`1.MinValue
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iminmaxvalue-1.minvalue
  name: MinValue
  nameWithType: IMinMaxValue<TSelf>.MinValue
  fullName: System.Numerics.IMinMaxValue<TSelf>.MinValue
  nameWithType.vb: IMinMaxValue(Of TSelf).MinValue
  fullName.vb: System.Numerics.IMinMaxValue(Of TSelf).MinValue
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
- uid: Jelly.Bit.ToString*
  commentId: Overload:Jelly.Bit.ToString
  href: Jelly.Bit.html#Jelly_Bit_ToString
  name: ToString
  nameWithType: Bit.ToString
  fullName: Jelly.Bit.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
- uid: Jelly.Bit.GetHashCode*
  commentId: Overload:Jelly.Bit.GetHashCode
  href: Jelly.Bit.html#Jelly_Bit_GetHashCode
  name: GetHashCode
  nameWithType: Bit.GetHashCode
  fullName: Jelly.Bit.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Jelly.Bit.CompareTo*
  commentId: Overload:Jelly.Bit.CompareTo
  href: Jelly.Bit.html#Jelly_Bit_CompareTo_Jelly_Bit_
  name: CompareTo
  nameWithType: Bit.CompareTo
  fullName: Jelly.Bit.CompareTo
- uid: System.IComparable{Jelly.Bit}.CompareTo(Jelly.Bit)
  commentId: M:System.IComparable{Jelly.Bit}.CompareTo(Jelly.Bit)
  parent: System.IComparable{Jelly.Bit}
  definition: System.IComparable`1.CompareTo(`0)
  href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  name: CompareTo(Bit)
  nameWithType: IComparable<Bit>.CompareTo(Bit)
  fullName: System.IComparable<Jelly.Bit>.CompareTo(Jelly.Bit)
  nameWithType.vb: IComparable(Of Bit).CompareTo(Bit)
  fullName.vb: System.IComparable(Of Jelly.Bit).CompareTo(Jelly.Bit)
  spec.csharp:
  - uid: System.IComparable{Jelly.Bit}.CompareTo(Jelly.Bit)
    name: CompareTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  - name: (
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: )
  spec.vb:
  - uid: System.IComparable{Jelly.Bit}.CompareTo(Jelly.Bit)
    name: CompareTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  - name: (
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: )
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  - name: (
  - name: T
  - name: )
- uid: Jelly.Bit.Equals*
  commentId: Overload:Jelly.Bit.Equals
  href: Jelly.Bit.html#Jelly_Bit_Equals_Jelly_Bit_
  name: Equals
  nameWithType: Bit.Equals
  fullName: Jelly.Bit.Equals
- uid: System.IEquatable{Jelly.Bit}.Equals(Jelly.Bit)
  commentId: M:System.IEquatable{Jelly.Bit}.Equals(Jelly.Bit)
  parent: System.IEquatable{Jelly.Bit}
  definition: System.IEquatable`1.Equals(`0)
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  name: Equals(Bit)
  nameWithType: IEquatable<Bit>.Equals(Bit)
  fullName: System.IEquatable<Jelly.Bit>.Equals(Jelly.Bit)
  nameWithType.vb: IEquatable(Of Bit).Equals(Bit)
  fullName.vb: System.IEquatable(Of Jelly.Bit).Equals(Jelly.Bit)
  spec.csharp:
  - uid: System.IEquatable{Jelly.Bit}.Equals(Jelly.Bit)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: )
  spec.vb:
  - uid: System.IEquatable{Jelly.Bit}.Equals(Jelly.Bit)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - name: T
  - name: )
- uid: System.IEquatable{System.Boolean}.Equals(System.Boolean)
  commentId: M:System.IEquatable{System.Boolean}.Equals(System.Boolean)
  parent: System.IEquatable{System.Boolean}
  definition: System.IEquatable`1.Equals(`0)
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  name: Equals(bool)
  nameWithType: IEquatable<bool>.Equals(bool)
  fullName: System.IEquatable<bool>.Equals(bool)
  nameWithType.vb: IEquatable(Of Boolean).Equals(Boolean)
  fullName.vb: System.IEquatable(Of Boolean).Equals(Boolean)
  name.vb: Equals(Boolean)
  spec.csharp:
  - uid: System.IEquatable{System.Boolean}.Equals(System.Boolean)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: System.IEquatable{System.Boolean}.Equals(System.Boolean)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Jelly.Bit.op_Equality*
  commentId: Overload:Jelly.Bit.op_Equality
  href: Jelly.Bit.html#Jelly_Bit_op_Equality_Jelly_Bit_Jelly_Bit_
  name: operator ==
  nameWithType: Bit.operator ==
  fullName: Jelly.Bit.operator ==
  nameWithType.vb: Bit.=
  fullName.vb: Jelly.Bit.=
  name.vb: =
  spec.csharp:
  - name: operator
  - name: " "
  - uid: Jelly.Bit.op_Equality*
    name: ==
    href: Jelly.Bit.html#Jelly_Bit_op_Equality_Jelly_Bit_Jelly_Bit_
- uid: System.Numerics.IEqualityOperators{Jelly.Bit,Jelly.Bit,System.Boolean}.op_Equality(Jelly.Bit,Jelly.Bit)
  commentId: M:System.Numerics.IEqualityOperators{Jelly.Bit,Jelly.Bit,System.Boolean}.op_Equality(Jelly.Bit,Jelly.Bit)
  parent: System.Numerics.IEqualityOperators{Jelly.Bit,Jelly.Bit,System.Boolean}
  definition: System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3.op_equality
  name: operator ==(Bit, Bit)
  nameWithType: IEqualityOperators<Bit, Bit, bool>.operator ==(Bit, Bit)
  fullName: System.Numerics.IEqualityOperators<Jelly.Bit, Jelly.Bit, bool>.operator ==(Jelly.Bit, Jelly.Bit)
  nameWithType.vb: IEqualityOperators(Of Bit, Bit, Boolean).=(Bit, Bit)
  fullName.vb: System.Numerics.IEqualityOperators(Of Jelly.Bit, Jelly.Bit, Boolean).=(Jelly.Bit, Jelly.Bit)
  name.vb: =(Bit, Bit)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IEqualityOperators{Jelly.Bit,Jelly.Bit,System.Boolean}.op_Equality(Jelly.Bit,Jelly.Bit)
    name: ==
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3.op_equality
  - name: (
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: ','
  - name: " "
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: )
  spec.vb:
  - name: =
  - name: (
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: ','
  - name: " "
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: )
- uid: System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)
  commentId: M:System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3.op_equality
  name: operator ==(TSelf, TOther)
  nameWithType: IEqualityOperators<TSelf, TOther, TResult>.operator ==(TSelf, TOther)
  fullName: System.Numerics.IEqualityOperators<TSelf, TOther, TResult>.operator ==(TSelf, TOther)
  nameWithType.vb: IEqualityOperators(Of TSelf, TOther, TResult).=(TSelf, TOther)
  fullName.vb: System.Numerics.IEqualityOperators(Of TSelf, TOther, TResult).=(TSelf, TOther)
  name.vb: =(TSelf, TOther)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)
    name: ==
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3.op_equality
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
  spec.vb:
  - name: =
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
- uid: Jelly.Bit.op_Inequality*
  commentId: Overload:Jelly.Bit.op_Inequality
  href: Jelly.Bit.html#Jelly_Bit_op_Inequality_Jelly_Bit_Jelly_Bit_
  name: operator !=
  nameWithType: Bit.operator !=
  fullName: Jelly.Bit.operator !=
  nameWithType.vb: Bit.<>
  fullName.vb: Jelly.Bit.<>
  name.vb: <>
  spec.csharp:
  - name: operator
  - name: " "
  - uid: Jelly.Bit.op_Inequality*
    name: '!='
    href: Jelly.Bit.html#Jelly_Bit_op_Inequality_Jelly_Bit_Jelly_Bit_
- uid: System.Numerics.IEqualityOperators{Jelly.Bit,Jelly.Bit,System.Boolean}.op_Inequality(Jelly.Bit,Jelly.Bit)
  commentId: M:System.Numerics.IEqualityOperators{Jelly.Bit,Jelly.Bit,System.Boolean}.op_Inequality(Jelly.Bit,Jelly.Bit)
  parent: System.Numerics.IEqualityOperators{Jelly.Bit,Jelly.Bit,System.Boolean}
  definition: System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3.op_inequality
  name: operator !=(Bit, Bit)
  nameWithType: IEqualityOperators<Bit, Bit, bool>.operator !=(Bit, Bit)
  fullName: System.Numerics.IEqualityOperators<Jelly.Bit, Jelly.Bit, bool>.operator !=(Jelly.Bit, Jelly.Bit)
  nameWithType.vb: IEqualityOperators(Of Bit, Bit, Boolean).<>(Bit, Bit)
  fullName.vb: System.Numerics.IEqualityOperators(Of Jelly.Bit, Jelly.Bit, Boolean).<>(Jelly.Bit, Jelly.Bit)
  name.vb: <>(Bit, Bit)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IEqualityOperators{Jelly.Bit,Jelly.Bit,System.Boolean}.op_Inequality(Jelly.Bit,Jelly.Bit)
    name: '!='
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3.op_inequality
  - name: (
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: ','
  - name: " "
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: )
  spec.vb:
  - name: <>
  - name: (
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: ','
  - name: " "
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: )
- uid: System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)
  commentId: M:System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3.op_inequality
  name: operator !=(TSelf, TOther)
  nameWithType: IEqualityOperators<TSelf, TOther, TResult>.operator !=(TSelf, TOther)
  fullName: System.Numerics.IEqualityOperators<TSelf, TOther, TResult>.operator !=(TSelf, TOther)
  nameWithType.vb: IEqualityOperators(Of TSelf, TOther, TResult).<>(TSelf, TOther)
  fullName.vb: System.Numerics.IEqualityOperators(Of TSelf, TOther, TResult).<>(TSelf, TOther)
  name.vb: <>(TSelf, TOther)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)
    name: '!='
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3.op_inequality
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
  spec.vb:
  - name: <>
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
- uid: Jelly.Bit.op_ExclusiveOr*
  commentId: Overload:Jelly.Bit.op_ExclusiveOr
  href: Jelly.Bit.html#Jelly_Bit_op_ExclusiveOr_Jelly_Bit_Jelly_Bit_
  name: operator ^
  nameWithType: Bit.operator ^
  fullName: Jelly.Bit.operator ^
  nameWithType.vb: Bit.Xor
  fullName.vb: Jelly.Bit.Xor
  name.vb: Xor
  spec.csharp:
  - name: operator
  - name: " "
  - uid: Jelly.Bit.op_ExclusiveOr*
    name: ^
    href: Jelly.Bit.html#Jelly_Bit_op_ExclusiveOr_Jelly_Bit_Jelly_Bit_
- uid: System.Numerics.IBitwiseOperators{Jelly.Bit,Jelly.Bit,Jelly.Bit}.op_ExclusiveOr(Jelly.Bit,Jelly.Bit)
  commentId: M:System.Numerics.IBitwiseOperators{Jelly.Bit,Jelly.Bit,Jelly.Bit}.op_ExclusiveOr(Jelly.Bit,Jelly.Bit)
  parent: System.Numerics.IBitwiseOperators{Jelly.Bit,Jelly.Bit,Jelly.Bit}
  definition: System.Numerics.IBitwiseOperators`3.op_ExclusiveOr(`0,`1)
  href: https://learn.microsoft.com/dotnet/api/system.numerics.ibitwiseoperators-3.op_exclusiveor
  name: operator ^(Bit, Bit)
  nameWithType: IBitwiseOperators<Bit, Bit, Bit>.operator ^(Bit, Bit)
  fullName: System.Numerics.IBitwiseOperators<Jelly.Bit, Jelly.Bit, Jelly.Bit>.operator ^(Jelly.Bit, Jelly.Bit)
  nameWithType.vb: IBitwiseOperators(Of Bit, Bit, Bit).Xor(Bit, Bit)
  fullName.vb: System.Numerics.IBitwiseOperators(Of Jelly.Bit, Jelly.Bit, Jelly.Bit).Xor(Jelly.Bit, Jelly.Bit)
  name.vb: Xor(Bit, Bit)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IBitwiseOperators{Jelly.Bit,Jelly.Bit,Jelly.Bit}.op_ExclusiveOr(Jelly.Bit,Jelly.Bit)
    name: ^
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.ibitwiseoperators-3.op_exclusiveor
  - name: (
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: ','
  - name: " "
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: )
  spec.vb:
  - name: Xor
  - name: (
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: ','
  - name: " "
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: )
- uid: System.Numerics.IBitwiseOperators`3.op_ExclusiveOr(`0,`1)
  commentId: M:System.Numerics.IBitwiseOperators`3.op_ExclusiveOr(`0,`1)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.ibitwiseoperators-3.op_exclusiveor
  name: operator ^(TSelf, TOther)
  nameWithType: IBitwiseOperators<TSelf, TOther, TResult>.operator ^(TSelf, TOther)
  fullName: System.Numerics.IBitwiseOperators<TSelf, TOther, TResult>.operator ^(TSelf, TOther)
  nameWithType.vb: IBitwiseOperators(Of TSelf, TOther, TResult).Xor(TSelf, TOther)
  fullName.vb: System.Numerics.IBitwiseOperators(Of TSelf, TOther, TResult).Xor(TSelf, TOther)
  name.vb: Xor(TSelf, TOther)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IBitwiseOperators`3.op_ExclusiveOr(`0,`1)
    name: ^
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.ibitwiseoperators-3.op_exclusiveor
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
  spec.vb:
  - name: Xor
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
- uid: Jelly.Bit.op_BitwiseAnd*
  commentId: Overload:Jelly.Bit.op_BitwiseAnd
  href: Jelly.Bit.html#Jelly_Bit_op_BitwiseAnd_Jelly_Bit_Jelly_Bit_
  name: operator &
  nameWithType: Bit.operator &
  fullName: Jelly.Bit.operator &
  nameWithType.vb: Bit.And
  fullName.vb: Jelly.Bit.And
  name.vb: And
  spec.csharp:
  - name: operator
  - name: " "
  - uid: Jelly.Bit.op_BitwiseAnd*
    name: '&'
    href: Jelly.Bit.html#Jelly_Bit_op_BitwiseAnd_Jelly_Bit_Jelly_Bit_
- uid: System.Numerics.IBitwiseOperators{Jelly.Bit,Jelly.Bit,Jelly.Bit}.op_BitwiseAnd(Jelly.Bit,Jelly.Bit)
  commentId: M:System.Numerics.IBitwiseOperators{Jelly.Bit,Jelly.Bit,Jelly.Bit}.op_BitwiseAnd(Jelly.Bit,Jelly.Bit)
  parent: System.Numerics.IBitwiseOperators{Jelly.Bit,Jelly.Bit,Jelly.Bit}
  definition: System.Numerics.IBitwiseOperators`3.op_BitwiseAnd(`0,`1)
  href: https://learn.microsoft.com/dotnet/api/system.numerics.ibitwiseoperators-3.op_bitwiseand
  name: operator &(Bit, Bit)
  nameWithType: IBitwiseOperators<Bit, Bit, Bit>.operator &(Bit, Bit)
  fullName: System.Numerics.IBitwiseOperators<Jelly.Bit, Jelly.Bit, Jelly.Bit>.operator &(Jelly.Bit, Jelly.Bit)
  nameWithType.vb: IBitwiseOperators(Of Bit, Bit, Bit).And(Bit, Bit)
  fullName.vb: System.Numerics.IBitwiseOperators(Of Jelly.Bit, Jelly.Bit, Jelly.Bit).And(Jelly.Bit, Jelly.Bit)
  name.vb: And(Bit, Bit)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IBitwiseOperators{Jelly.Bit,Jelly.Bit,Jelly.Bit}.op_BitwiseAnd(Jelly.Bit,Jelly.Bit)
    name: '&'
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.ibitwiseoperators-3.op_bitwiseand
  - name: (
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: ','
  - name: " "
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: )
  spec.vb:
  - name: And
  - name: (
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: ','
  - name: " "
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: )
- uid: System.Numerics.IBitwiseOperators`3.op_BitwiseAnd(`0,`1)
  commentId: M:System.Numerics.IBitwiseOperators`3.op_BitwiseAnd(`0,`1)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.ibitwiseoperators-3.op_bitwiseand
  name: operator &(TSelf, TOther)
  nameWithType: IBitwiseOperators<TSelf, TOther, TResult>.operator &(TSelf, TOther)
  fullName: System.Numerics.IBitwiseOperators<TSelf, TOther, TResult>.operator &(TSelf, TOther)
  nameWithType.vb: IBitwiseOperators(Of TSelf, TOther, TResult).And(TSelf, TOther)
  fullName.vb: System.Numerics.IBitwiseOperators(Of TSelf, TOther, TResult).And(TSelf, TOther)
  name.vb: And(TSelf, TOther)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IBitwiseOperators`3.op_BitwiseAnd(`0,`1)
    name: '&'
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.ibitwiseoperators-3.op_bitwiseand
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
  spec.vb:
  - name: And
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
- uid: Jelly.Bit.op_BitwiseOr*
  commentId: Overload:Jelly.Bit.op_BitwiseOr
  href: Jelly.Bit.html#Jelly_Bit_op_BitwiseOr_Jelly_Bit_Jelly_Bit_
  name: operator |
  nameWithType: Bit.operator |
  fullName: Jelly.Bit.operator |
  nameWithType.vb: Bit.Or
  fullName.vb: Jelly.Bit.Or
  name.vb: Or
  spec.csharp:
  - name: operator
  - name: " "
  - uid: Jelly.Bit.op_BitwiseOr*
    name: '|'
    href: Jelly.Bit.html#Jelly_Bit_op_BitwiseOr_Jelly_Bit_Jelly_Bit_
- uid: System.Numerics.IBitwiseOperators{Jelly.Bit,Jelly.Bit,Jelly.Bit}.op_BitwiseOr(Jelly.Bit,Jelly.Bit)
  commentId: M:System.Numerics.IBitwiseOperators{Jelly.Bit,Jelly.Bit,Jelly.Bit}.op_BitwiseOr(Jelly.Bit,Jelly.Bit)
  parent: System.Numerics.IBitwiseOperators{Jelly.Bit,Jelly.Bit,Jelly.Bit}
  definition: System.Numerics.IBitwiseOperators`3.op_BitwiseOr(`0,`1)
  href: https://learn.microsoft.com/dotnet/api/system.numerics.ibitwiseoperators-3.op_bitwiseor
  name: operator |(Bit, Bit)
  nameWithType: IBitwiseOperators<Bit, Bit, Bit>.operator |(Bit, Bit)
  fullName: System.Numerics.IBitwiseOperators<Jelly.Bit, Jelly.Bit, Jelly.Bit>.operator |(Jelly.Bit, Jelly.Bit)
  nameWithType.vb: IBitwiseOperators(Of Bit, Bit, Bit).Or(Bit, Bit)
  fullName.vb: System.Numerics.IBitwiseOperators(Of Jelly.Bit, Jelly.Bit, Jelly.Bit).Or(Jelly.Bit, Jelly.Bit)
  name.vb: Or(Bit, Bit)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IBitwiseOperators{Jelly.Bit,Jelly.Bit,Jelly.Bit}.op_BitwiseOr(Jelly.Bit,Jelly.Bit)
    name: '|'
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.ibitwiseoperators-3.op_bitwiseor
  - name: (
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: ','
  - name: " "
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: )
  spec.vb:
  - name: Or
  - name: (
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: ','
  - name: " "
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: )
- uid: System.Numerics.IBitwiseOperators`3.op_BitwiseOr(`0,`1)
  commentId: M:System.Numerics.IBitwiseOperators`3.op_BitwiseOr(`0,`1)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.ibitwiseoperators-3.op_bitwiseor
  name: operator |(TSelf, TOther)
  nameWithType: IBitwiseOperators<TSelf, TOther, TResult>.operator |(TSelf, TOther)
  fullName: System.Numerics.IBitwiseOperators<TSelf, TOther, TResult>.operator |(TSelf, TOther)
  nameWithType.vb: IBitwiseOperators(Of TSelf, TOther, TResult).Or(TSelf, TOther)
  fullName.vb: System.Numerics.IBitwiseOperators(Of TSelf, TOther, TResult).Or(TSelf, TOther)
  name.vb: Or(TSelf, TOther)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IBitwiseOperators`3.op_BitwiseOr(`0,`1)
    name: '|'
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.ibitwiseoperators-3.op_bitwiseor
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
  spec.vb:
  - name: Or
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
- uid: Jelly.Bit.op_OnesComplement*
  commentId: Overload:Jelly.Bit.op_OnesComplement
  href: Jelly.Bit.html#Jelly_Bit_op_OnesComplement_Jelly_Bit_
  name: operator ~
  nameWithType: Bit.operator ~
  fullName: Jelly.Bit.operator ~
  nameWithType.vb: Bit.Not
  fullName.vb: Jelly.Bit.Not
  name.vb: Not
  spec.csharp:
  - name: operator
  - name: " "
  - uid: Jelly.Bit.op_OnesComplement*
    name: "~"
    href: Jelly.Bit.html#Jelly_Bit_op_OnesComplement_Jelly_Bit_
- uid: System.Numerics.IBitwiseOperators{Jelly.Bit,Jelly.Bit,Jelly.Bit}.op_OnesComplement(Jelly.Bit)
  commentId: M:System.Numerics.IBitwiseOperators{Jelly.Bit,Jelly.Bit,Jelly.Bit}.op_OnesComplement(Jelly.Bit)
  parent: System.Numerics.IBitwiseOperators{Jelly.Bit,Jelly.Bit,Jelly.Bit}
  definition: System.Numerics.IBitwiseOperators`3.op_OnesComplement(`0)
  href: https://learn.microsoft.com/dotnet/api/system.numerics.ibitwiseoperators-3.op_onescomplement
  name: operator ~(Bit)
  nameWithType: IBitwiseOperators<Bit, Bit, Bit>.operator ~(Bit)
  fullName: System.Numerics.IBitwiseOperators<Jelly.Bit, Jelly.Bit, Jelly.Bit>.operator ~(Jelly.Bit)
  nameWithType.vb: IBitwiseOperators(Of Bit, Bit, Bit).Not(Bit)
  fullName.vb: System.Numerics.IBitwiseOperators(Of Jelly.Bit, Jelly.Bit, Jelly.Bit).Not(Jelly.Bit)
  name.vb: Not(Bit)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IBitwiseOperators{Jelly.Bit,Jelly.Bit,Jelly.Bit}.op_OnesComplement(Jelly.Bit)
    name: "~"
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.ibitwiseoperators-3.op_onescomplement
  - name: (
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: )
  spec.vb:
  - name: Not
  - name: (
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: )
- uid: System.Numerics.IBitwiseOperators`3.op_OnesComplement(`0)
  commentId: M:System.Numerics.IBitwiseOperators`3.op_OnesComplement(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.ibitwiseoperators-3.op_onescomplement
  name: operator ~(TSelf)
  nameWithType: IBitwiseOperators<TSelf, TOther, TResult>.operator ~(TSelf)
  fullName: System.Numerics.IBitwiseOperators<TSelf, TOther, TResult>.operator ~(TSelf)
  nameWithType.vb: IBitwiseOperators(Of TSelf, TOther, TResult).Not(TSelf)
  fullName.vb: System.Numerics.IBitwiseOperators(Of TSelf, TOther, TResult).Not(TSelf)
  name.vb: Not(TSelf)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IBitwiseOperators`3.op_OnesComplement(`0)
    name: "~"
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.ibitwiseoperators-3.op_onescomplement
  - name: (
  - name: TSelf
  - name: )
  spec.vb:
  - name: Not
  - name: (
  - name: TSelf
  - name: )
- uid: Jelly.Bit.op_Modulus*
  commentId: Overload:Jelly.Bit.op_Modulus
  href: Jelly.Bit.html#Jelly_Bit_op_Modulus_Jelly_Bit_Jelly_Bit_
  name: operator %
  nameWithType: Bit.operator %
  fullName: Jelly.Bit.operator %
  nameWithType.vb: Bit.Mod
  fullName.vb: Jelly.Bit.Mod
  name.vb: Mod
  spec.csharp:
  - name: operator
  - name: " "
  - uid: Jelly.Bit.op_Modulus*
    name: '%'
    href: Jelly.Bit.html#Jelly_Bit_op_Modulus_Jelly_Bit_Jelly_Bit_
- uid: System.Numerics.IModulusOperators{Jelly.Bit,Jelly.Bit,Jelly.Bit}.op_Modulus(Jelly.Bit,Jelly.Bit)
  commentId: M:System.Numerics.IModulusOperators{Jelly.Bit,Jelly.Bit,Jelly.Bit}.op_Modulus(Jelly.Bit,Jelly.Bit)
  parent: System.Numerics.IModulusOperators{Jelly.Bit,Jelly.Bit,Jelly.Bit}
  definition: System.Numerics.IModulusOperators`3.op_Modulus(`0,`1)
  href: https://learn.microsoft.com/dotnet/api/system.numerics.imodulusoperators-3.op_modulus
  name: operator %(Bit, Bit)
  nameWithType: IModulusOperators<Bit, Bit, Bit>.operator %(Bit, Bit)
  fullName: System.Numerics.IModulusOperators<Jelly.Bit, Jelly.Bit, Jelly.Bit>.operator %(Jelly.Bit, Jelly.Bit)
  nameWithType.vb: IModulusOperators(Of Bit, Bit, Bit).Mod(Bit, Bit)
  fullName.vb: System.Numerics.IModulusOperators(Of Jelly.Bit, Jelly.Bit, Jelly.Bit).Mod(Jelly.Bit, Jelly.Bit)
  name.vb: Mod(Bit, Bit)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IModulusOperators{Jelly.Bit,Jelly.Bit,Jelly.Bit}.op_Modulus(Jelly.Bit,Jelly.Bit)
    name: '%'
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.imodulusoperators-3.op_modulus
  - name: (
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: ','
  - name: " "
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: )
  spec.vb:
  - name: Mod
  - name: (
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: ','
  - name: " "
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: )
- uid: System.Numerics.IModulusOperators`3.op_Modulus(`0,`1)
  commentId: M:System.Numerics.IModulusOperators`3.op_Modulus(`0,`1)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.imodulusoperators-3.op_modulus
  name: operator %(TSelf, TOther)
  nameWithType: IModulusOperators<TSelf, TOther, TResult>.operator %(TSelf, TOther)
  fullName: System.Numerics.IModulusOperators<TSelf, TOther, TResult>.operator %(TSelf, TOther)
  nameWithType.vb: IModulusOperators(Of TSelf, TOther, TResult).Mod(TSelf, TOther)
  fullName.vb: System.Numerics.IModulusOperators(Of TSelf, TOther, TResult).Mod(TSelf, TOther)
  name.vb: Mod(TSelf, TOther)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IModulusOperators`3.op_Modulus(`0,`1)
    name: '%'
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.imodulusoperators-3.op_modulus
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
  spec.vb:
  - name: Mod
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  name: Equals(object)
  nameWithType: ValueType.Equals(object)
  fullName: System.ValueType.Equals(object)
  nameWithType.vb: ValueType.Equals(Object)
  fullName.vb: System.ValueType.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: Jelly.Bit.op_Implicit*
  commentId: Overload:Jelly.Bit.op_Implicit
  name: implicit operator
  nameWithType: Bit.implicit operator
  fullName: Jelly.Bit.implicit operator
  nameWithType.vb: Bit.CType
  fullName.vb: Jelly.Bit.CType
  name.vb: CType
  spec.csharp:
  - name: implicit
  - name: " "
  - name: operator
- uid: Jelly.Bit.op_Explicit*
  commentId: Overload:Jelly.Bit.op_Explicit
  name: explicit operator
  nameWithType: Bit.explicit operator
  fullName: Jelly.Bit.explicit operator
  nameWithType.vb: Bit.CType
  fullName.vb: Jelly.Bit.CType
  name.vb: CType
  spec.csharp:
  - name: explicit
  - name: " "
  - name: operator
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: byte
  nameWithType: byte
  fullName: byte
  nameWithType.vb: Byte
  fullName.vb: Byte
  name.vb: Byte
- uid: System.SByte
  commentId: T:System.SByte
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.sbyte
  name: sbyte
  nameWithType: sbyte
  fullName: sbyte
  nameWithType.vb: SByte
  fullName.vb: SByte
  name.vb: SByte
- uid: System.UInt16
  commentId: T:System.UInt16
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint16
  name: ushort
  nameWithType: ushort
  fullName: ushort
  nameWithType.vb: UShort
  fullName.vb: UShort
  name.vb: UShort
- uid: System.Int16
  commentId: T:System.Int16
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int16
  name: short
  nameWithType: short
  fullName: short
  nameWithType.vb: Short
  fullName.vb: Short
  name.vb: Short
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint32
  name: uint
  nameWithType: uint
  fullName: uint
  nameWithType.vb: UInteger
  fullName.vb: UInteger
  name.vb: UInteger
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint64
  name: ulong
  nameWithType: ulong
  fullName: ulong
  nameWithType.vb: ULong
  fullName.vb: ULong
  name.vb: ULong
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int64
  name: long
  nameWithType: long
  fullName: long
  nameWithType.vb: Long
  fullName.vb: Long
  name.vb: Long
- uid: Jelly.Bit.op_LessThan*
  commentId: Overload:Jelly.Bit.op_LessThan
  href: Jelly.Bit.html#Jelly_Bit_op_LessThan_Jelly_Bit_Jelly_Bit_
  name: operator <
  nameWithType: Bit.operator <
  fullName: Jelly.Bit.operator <
  nameWithType.vb: Bit.<
  fullName.vb: Jelly.Bit.<
  name.vb: <
  spec.csharp:
  - name: operator
  - name: " "
  - uid: Jelly.Bit.op_LessThan*
    name: <
    href: Jelly.Bit.html#Jelly_Bit_op_LessThan_Jelly_Bit_Jelly_Bit_
- uid: System.Numerics.IComparisonOperators{Jelly.Bit,Jelly.Bit,System.Boolean}.op_LessThan(Jelly.Bit,Jelly.Bit)
  commentId: M:System.Numerics.IComparisonOperators{Jelly.Bit,Jelly.Bit,System.Boolean}.op_LessThan(Jelly.Bit,Jelly.Bit)
  parent: System.Numerics.IComparisonOperators{Jelly.Bit,Jelly.Bit,System.Boolean}
  definition: System.Numerics.IComparisonOperators`3.op_LessThan(`0,`1)
  href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_lessthan
  name: operator <(Bit, Bit)
  nameWithType: IComparisonOperators<Bit, Bit, bool>.operator <(Bit, Bit)
  fullName: System.Numerics.IComparisonOperators<Jelly.Bit, Jelly.Bit, bool>.operator <(Jelly.Bit, Jelly.Bit)
  nameWithType.vb: IComparisonOperators(Of Bit, Bit, Boolean).<(Bit, Bit)
  fullName.vb: System.Numerics.IComparisonOperators(Of Jelly.Bit, Jelly.Bit, Boolean).<(Jelly.Bit, Jelly.Bit)
  name.vb: <(Bit, Bit)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IComparisonOperators{Jelly.Bit,Jelly.Bit,System.Boolean}.op_LessThan(Jelly.Bit,Jelly.Bit)
    name: <
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_lessthan
  - name: (
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: ','
  - name: " "
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: )
  spec.vb:
  - name: <
  - name: (
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: ','
  - name: " "
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: )
- uid: System.Numerics.IComparisonOperators`3.op_LessThan(`0,`1)
  commentId: M:System.Numerics.IComparisonOperators`3.op_LessThan(`0,`1)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_lessthan
  name: operator <(TSelf, TOther)
  nameWithType: IComparisonOperators<TSelf, TOther, TResult>.operator <(TSelf, TOther)
  fullName: System.Numerics.IComparisonOperators<TSelf, TOther, TResult>.operator <(TSelf, TOther)
  nameWithType.vb: IComparisonOperators(Of TSelf, TOther, TResult).<(TSelf, TOther)
  fullName.vb: System.Numerics.IComparisonOperators(Of TSelf, TOther, TResult).<(TSelf, TOther)
  name.vb: <(TSelf, TOther)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IComparisonOperators`3.op_LessThan(`0,`1)
    name: <
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_lessthan
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
  spec.vb:
  - name: <
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
- uid: Jelly.Bit.op_LessThanOrEqual*
  commentId: Overload:Jelly.Bit.op_LessThanOrEqual
  href: Jelly.Bit.html#Jelly_Bit_op_LessThanOrEqual_Jelly_Bit_Jelly_Bit_
  name: operator <=
  nameWithType: Bit.operator <=
  fullName: Jelly.Bit.operator <=
  nameWithType.vb: Bit.<=
  fullName.vb: Jelly.Bit.<=
  name.vb: <=
  spec.csharp:
  - name: operator
  - name: " "
  - uid: Jelly.Bit.op_LessThanOrEqual*
    name: <=
    href: Jelly.Bit.html#Jelly_Bit_op_LessThanOrEqual_Jelly_Bit_Jelly_Bit_
- uid: System.Numerics.IComparisonOperators{Jelly.Bit,Jelly.Bit,System.Boolean}.op_LessThanOrEqual(Jelly.Bit,Jelly.Bit)
  commentId: M:System.Numerics.IComparisonOperators{Jelly.Bit,Jelly.Bit,System.Boolean}.op_LessThanOrEqual(Jelly.Bit,Jelly.Bit)
  parent: System.Numerics.IComparisonOperators{Jelly.Bit,Jelly.Bit,System.Boolean}
  definition: System.Numerics.IComparisonOperators`3.op_LessThanOrEqual(`0,`1)
  href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_lessthanorequal
  name: operator <=(Bit, Bit)
  nameWithType: IComparisonOperators<Bit, Bit, bool>.operator <=(Bit, Bit)
  fullName: System.Numerics.IComparisonOperators<Jelly.Bit, Jelly.Bit, bool>.operator <=(Jelly.Bit, Jelly.Bit)
  nameWithType.vb: IComparisonOperators(Of Bit, Bit, Boolean).<=(Bit, Bit)
  fullName.vb: System.Numerics.IComparisonOperators(Of Jelly.Bit, Jelly.Bit, Boolean).<=(Jelly.Bit, Jelly.Bit)
  name.vb: <=(Bit, Bit)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IComparisonOperators{Jelly.Bit,Jelly.Bit,System.Boolean}.op_LessThanOrEqual(Jelly.Bit,Jelly.Bit)
    name: <=
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_lessthanorequal
  - name: (
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: ','
  - name: " "
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: )
  spec.vb:
  - name: <=
  - name: (
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: ','
  - name: " "
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: )
- uid: System.Numerics.IComparisonOperators`3.op_LessThanOrEqual(`0,`1)
  commentId: M:System.Numerics.IComparisonOperators`3.op_LessThanOrEqual(`0,`1)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_lessthanorequal
  name: operator <=(TSelf, TOther)
  nameWithType: IComparisonOperators<TSelf, TOther, TResult>.operator <=(TSelf, TOther)
  fullName: System.Numerics.IComparisonOperators<TSelf, TOther, TResult>.operator <=(TSelf, TOther)
  nameWithType.vb: IComparisonOperators(Of TSelf, TOther, TResult).<=(TSelf, TOther)
  fullName.vb: System.Numerics.IComparisonOperators(Of TSelf, TOther, TResult).<=(TSelf, TOther)
  name.vb: <=(TSelf, TOther)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IComparisonOperators`3.op_LessThanOrEqual(`0,`1)
    name: <=
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_lessthanorequal
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
  spec.vb:
  - name: <=
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
- uid: Jelly.Bit.op_GreaterThan*
  commentId: Overload:Jelly.Bit.op_GreaterThan
  href: Jelly.Bit.html#Jelly_Bit_op_GreaterThan_Jelly_Bit_Jelly_Bit_
  name: operator >
  nameWithType: Bit.operator >
  fullName: Jelly.Bit.operator >
  nameWithType.vb: Bit.>
  fullName.vb: Jelly.Bit.>
  name.vb: '>'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: Jelly.Bit.op_GreaterThan*
    name: '>'
    href: Jelly.Bit.html#Jelly_Bit_op_GreaterThan_Jelly_Bit_Jelly_Bit_
- uid: System.Numerics.IComparisonOperators{Jelly.Bit,Jelly.Bit,System.Boolean}.op_GreaterThan(Jelly.Bit,Jelly.Bit)
  commentId: M:System.Numerics.IComparisonOperators{Jelly.Bit,Jelly.Bit,System.Boolean}.op_GreaterThan(Jelly.Bit,Jelly.Bit)
  parent: System.Numerics.IComparisonOperators{Jelly.Bit,Jelly.Bit,System.Boolean}
  definition: System.Numerics.IComparisonOperators`3.op_GreaterThan(`0,`1)
  href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_greaterthan
  name: operator >(Bit, Bit)
  nameWithType: IComparisonOperators<Bit, Bit, bool>.operator >(Bit, Bit)
  fullName: System.Numerics.IComparisonOperators<Jelly.Bit, Jelly.Bit, bool>.operator >(Jelly.Bit, Jelly.Bit)
  nameWithType.vb: IComparisonOperators(Of Bit, Bit, Boolean).>(Bit, Bit)
  fullName.vb: System.Numerics.IComparisonOperators(Of Jelly.Bit, Jelly.Bit, Boolean).>(Jelly.Bit, Jelly.Bit)
  name.vb: '>(Bit, Bit)'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IComparisonOperators{Jelly.Bit,Jelly.Bit,System.Boolean}.op_GreaterThan(Jelly.Bit,Jelly.Bit)
    name: '>'
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_greaterthan
  - name: (
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: ','
  - name: " "
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: )
  spec.vb:
  - name: '>'
  - name: (
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: ','
  - name: " "
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: )
- uid: System.Numerics.IComparisonOperators`3.op_GreaterThan(`0,`1)
  commentId: M:System.Numerics.IComparisonOperators`3.op_GreaterThan(`0,`1)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_greaterthan
  name: operator >(TSelf, TOther)
  nameWithType: IComparisonOperators<TSelf, TOther, TResult>.operator >(TSelf, TOther)
  fullName: System.Numerics.IComparisonOperators<TSelf, TOther, TResult>.operator >(TSelf, TOther)
  nameWithType.vb: IComparisonOperators(Of TSelf, TOther, TResult).>(TSelf, TOther)
  fullName.vb: System.Numerics.IComparisonOperators(Of TSelf, TOther, TResult).>(TSelf, TOther)
  name.vb: '>(TSelf, TOther)'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IComparisonOperators`3.op_GreaterThan(`0,`1)
    name: '>'
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_greaterthan
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
  spec.vb:
  - name: '>'
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
- uid: Jelly.Bit.op_GreaterThanOrEqual*
  commentId: Overload:Jelly.Bit.op_GreaterThanOrEqual
  href: Jelly.Bit.html#Jelly_Bit_op_GreaterThanOrEqual_Jelly_Bit_Jelly_Bit_
  name: operator >=
  nameWithType: Bit.operator >=
  fullName: Jelly.Bit.operator >=
  nameWithType.vb: Bit.>=
  fullName.vb: Jelly.Bit.>=
  name.vb: '>='
  spec.csharp:
  - name: operator
  - name: " "
  - uid: Jelly.Bit.op_GreaterThanOrEqual*
    name: '>='
    href: Jelly.Bit.html#Jelly_Bit_op_GreaterThanOrEqual_Jelly_Bit_Jelly_Bit_
- uid: System.Numerics.IComparisonOperators{Jelly.Bit,Jelly.Bit,System.Boolean}.op_GreaterThanOrEqual(Jelly.Bit,Jelly.Bit)
  commentId: M:System.Numerics.IComparisonOperators{Jelly.Bit,Jelly.Bit,System.Boolean}.op_GreaterThanOrEqual(Jelly.Bit,Jelly.Bit)
  parent: System.Numerics.IComparisonOperators{Jelly.Bit,Jelly.Bit,System.Boolean}
  definition: System.Numerics.IComparisonOperators`3.op_GreaterThanOrEqual(`0,`1)
  href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_greaterthanorequal
  name: operator >=(Bit, Bit)
  nameWithType: IComparisonOperators<Bit, Bit, bool>.operator >=(Bit, Bit)
  fullName: System.Numerics.IComparisonOperators<Jelly.Bit, Jelly.Bit, bool>.operator >=(Jelly.Bit, Jelly.Bit)
  nameWithType.vb: IComparisonOperators(Of Bit, Bit, Boolean).>=(Bit, Bit)
  fullName.vb: System.Numerics.IComparisonOperators(Of Jelly.Bit, Jelly.Bit, Boolean).>=(Jelly.Bit, Jelly.Bit)
  name.vb: '>=(Bit, Bit)'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IComparisonOperators{Jelly.Bit,Jelly.Bit,System.Boolean}.op_GreaterThanOrEqual(Jelly.Bit,Jelly.Bit)
    name: '>='
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_greaterthanorequal
  - name: (
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: ','
  - name: " "
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: )
  spec.vb:
  - name: '>='
  - name: (
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: ','
  - name: " "
  - uid: Jelly.Bit
    name: Bit
    href: Jelly.Bit.html
  - name: )
- uid: System.Numerics.IComparisonOperators`3.op_GreaterThanOrEqual(`0,`1)
  commentId: M:System.Numerics.IComparisonOperators`3.op_GreaterThanOrEqual(`0,`1)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_greaterthanorequal
  name: operator >=(TSelf, TOther)
  nameWithType: IComparisonOperators<TSelf, TOther, TResult>.operator >=(TSelf, TOther)
  fullName: System.Numerics.IComparisonOperators<TSelf, TOther, TResult>.operator >=(TSelf, TOther)
  nameWithType.vb: IComparisonOperators(Of TSelf, TOther, TResult).>=(TSelf, TOther)
  fullName.vb: System.Numerics.IComparisonOperators(Of TSelf, TOther, TResult).>=(TSelf, TOther)
  name.vb: '>=(TSelf, TOther)'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IComparisonOperators`3.op_GreaterThanOrEqual(`0,`1)
    name: '>='
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_greaterthanorequal
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
  spec.vb:
  - name: '>='
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
- uid: Jelly.Bit.op_LogicalNot*
  commentId: Overload:Jelly.Bit.op_LogicalNot
  href: Jelly.Bit.html#Jelly_Bit_op_LogicalNot_Jelly_Bit_
  name: operator !
  nameWithType: Bit.operator !
  fullName: Jelly.Bit.operator !
  nameWithType.vb: Bit.Not
  fullName.vb: Jelly.Bit.Not
  name.vb: Not
  spec.csharp:
  - name: operator
  - name: " "
  - uid: Jelly.Bit.op_LogicalNot*
    name: '!'
    href: Jelly.Bit.html#Jelly_Bit_op_LogicalNot_Jelly_Bit_
